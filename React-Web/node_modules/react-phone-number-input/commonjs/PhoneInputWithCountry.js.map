{"version":3,"file":"PhoneInputWithCountry.js","names":["_react","_interopRequireDefault","require","_propTypes","_classnames","_InputSmart","_InputBasic","_CountrySelect","_Flag","_InternationalIcon","_countries2","_CountryIcon","_useExternalRef","_PropTypes","_phoneInputHelpers","_getPhoneInputWithCountryStateUpdateFromNewProps","_excluded","obj","__esModule","_typeof","o","Symbol","iterator","constructor","prototype","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_extends","assign","bind","target","i","source","key","hasOwnProperty","call","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","_classCallCheck","instance","Constructor","TypeError","_defineProperties","props","descriptor","configurable","writable","_toPropertyKey","_createClass","protoProps","staticProps","_callSuper","_getPrototypeOf","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","self","_assertThisInitialized","ReferenceError","Boolean","valueOf","setPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","value","_setPrototypeOf","p","_toPrimitive","toPrimitive","String","Number","PhoneNumberInput_","_React$PureComponent","_this","setRefsValue","inputRef","country","metadata","isCountrySupportedWithError","newCountry","_this$props","international","onChange","focusInputOnCountrySelection","_this$state","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","getPhoneDigitsForNewCountry","useNationalFormat","newValue","e164","current","focus","setState","latestCountrySelectedByUser","hasUserSelectedACountry","_phoneDigits","_this$props2","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","countries","currentlySelectedCountry","_onPhoneDigitsChange","onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","couldNumberBelongToCountry","undefined","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","React","createRef","_this$props3","labels","displayInitialValueAsLocalNumber","initialValueFormat","_this$props4","getSupportedCountries","phoneNumber","parsePhoneNumber","CountryIcon","createCountryIconComponent","preSelectedCountry","getPreSelectedCountry","required","getCountries","getInitialPhoneDigits","componentDidMount","onCountryChange","selectedCountry","componentDidUpdate","prevProps","prevState","getCountrySelectOptions","_ref","_this$props5","countryOptionsOrder","locales","useMemoCountrySelectOptions","sortCountryOptions","countryNames","compareStringsLocales","getSupportedCountryOptions","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","_ref2","countryOptions","render","_this$props6","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","containerComponentProps","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","_this$state3","InputComponent","InputSmart","InputBasic","countrySelectOptions","createElement","classNames","concat","options","onCountryFocus","onCountryBlur","iconComponent","ref","setInputRef","type","withCountryCallingCode","getDerivedStateFromProps","getPhoneInputWithCountryStateUpdateFromNewProps","PureComponent","PhoneNumberInput","forwardRef","withDefaultProps","propTypes","PropTypes","string","func","isRequired","bool","oneOf","arrayOf","labelsPropType","oneOfType","objectOf","elementType","object","metadataPropType","defaultProps","CountrySelect","Flag","InternationalIcon","any","_default","exports","a","b"],"sources":["../source/PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport { setRefsValue } from './useExternalRef.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tcouldNumberBelongToCountry,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\t// This function mimicks `refSetter` function returned from `useExternalRef()` hook\r\n\t// because this class-like React component can't use the `useExternalRef()` hook.\r\n\tsetInputRef = (instance) => {\r\n\t\tsetRefsValue([this.props.inputRef, this.inputRef], instance)\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\tlatestCountrySelectedByUser: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tlatestCountrySelectedByUser\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t\t// `prevPhoneDigits` parameter to the same `onPhoneDigitsChange()` function\r\n\t\t\t// on next input change event.\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\t// Reset `latestCountrySelectedByUser` if it no longer fits the `value`.\r\n\t\tif (latestCountrySelectedByUser && value && !couldNumberBelongToCountry(value, latestCountrySelectedByUser, metadata)) {\r\n\t\t\tstateUpdate.latestCountrySelectedByUser = undefined\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\t\t\tcontainerComponentProps,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}\r\n\t\t\t\t{...containerComponentProps}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tinternational={international ? true : undefined}\r\n\t\t\t\t\twithCountryCallingCode={international ? true : undefined}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...withDefaultProps(props)} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component props.\r\n\t */\r\n\tcontainerComponentProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool\r\n}\r\n\r\nconst defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nfunction withDefaultProps(props) {\r\n\tprops = { ...props }\r\n\r\n\tfor (const key in defaultProps) {\r\n\t\tif (props[key] === undefined) {\r\n\t\t\tprops[key] = defaultProps[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn props\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n"],"mappings":"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4H;EAAI,EAAC,CAAC;AAAA,CAChE,CAAC;AAEFO,gBAAgB,CAACG,SAAS,GAAG;EAC5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCjJ,KAAK,EAAEkJ,qBAAS,CAACC,MAAM;EAEvB;AACD;AACA;AACA;AACA;AACA;AACA;EACCjI,QAAQ,EAAEgI,qBAAS,CAACE,IAAI,CAACC,UAAU;EAEnC;AACD;AACA;AACA;EACC7F,OAAO,EAAE0F,qBAAS,CAACE,IAAI;EAEvB;AACD;AACA;AACA;EACC3F,MAAM,EAAEyF,qBAAS,CAACE,IAAI;EAEtB;AACD;AACA;AACA;EACC7C,QAAQ,EAAE2C,qBAAS,CAACI,IAAI;EAExB;AACD;AACA;AACA;EACC9C,QAAQ,EAAE0C,qBAAS,CAACI,IAAI;EAExB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA7C,YAAY,EAAEyC,qBAAS,CAACC,MAAM;EAE9B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAlF,kBAAkB,EAAEiF,qBAAS,CAACK,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;EAEjD;EACA;EACAvF,gCAAgC,EAAEkF,qBAAS,CAACI,IAAI;EAEhD;AACD;AACA;AACA;AACA;AACA;EACC;EACAjH,cAAc,EAAE6G,qBAAS,CAACC,MAAM;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;EACCzG,SAAS,EAAEwG,qBAAS,CAACM,OAAO,CAACN,qBAAS,CAACC,MAAM,CAAC;EAE9C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCpF,MAAM,EAAE0F,iBAAc;EAEtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClE,OAAO,EAAE2D,qBAAS,CAACQ,SAAS,CAAC,CAC5BR,qBAAS,CAACC,MAAM,EAChBD,qBAAS,CAACM,OAAO,CAACN,qBAAS,CAACC,MAAM,CAAC,CACnC,CAAC;EAEF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC5B,OAAO,EAAE2B,qBAAS,CAACC,MAAM;EAEzB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC9B,KAAK,EAAE6B,qBAAS,CAACS,QAAQ,CAACT,qBAAS,CAACU,WAAW,CAAC;EAEhD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtC,aAAa,EAAE4B,qBAAS,CAACU,WAAW;EAEpC;AACD;AACA;EACCtH,sBAAsB,EAAE4G,qBAAS,CAACI,IAAI;EAEtC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC9B,iBAAiB,EAAE0B,qBAAS,CAACU,WAAW;EAExC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCtE,mBAAmB,EAAE4D,qBAAS,CAACM,OAAO,CAACN,qBAAS,CAACC,MAAM,CAAC;EAExD;AACD;AACA;EACCzC,KAAK,EAAEwC,qBAAS,CAACW,MAAM;EAEvB;AACD;AACA;EACClD,SAAS,EAAEuC,qBAAS,CAACC,MAAM;EAE3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCnC,sBAAsB,EAAEkC,qBAAS,CAACU,WAAW;EAE7C;AACD;AACA;AACA;AACA;EACCjG,kBAAkB,EAAEuF,qBAAS,CAACW,MAAM;EAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCjD,cAAc,EAAEsC,qBAAS,CAACU,WAAW;EAErC;AACD;AACA;EACC/C,gBAAgB,EAAEqC,qBAAS,CAACW,MAAM;EAElC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC3C,kBAAkB,EAAEgC,qBAAS,CAACU,WAAW;EAEzC;AACD;AACA;EACCzC,uBAAuB,EAAE+B,qBAAS,CAACW,MAAM;EAEzC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA/C,UAAU,EAAEoC,qBAAS,CAACI,IAAI;EAE1B;AACD;AACA;AACA;AACA;EACCrI,aAAa,EAAEiI,qBAAS,CAACI,IAAI;EAE7B;AACD;AACA;AACA;EACC/G,cAAc,EAAE2G,qBAAS,CAACI,IAAI;EAE9B;AACD;AACA;AACA;AACA;EACC9G,0BAA0B,EAAE0G,qBAAS,CAACI,IAAI;EAE1C;AACD;AACA;AACA;AACA;AACA;EACCzI,QAAQ,EAAEiJ,mBAAgB;EAE1B;AACD;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAhF,eAAe,EAAEoE,qBAAS,CAACE,IAAI;EAE/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCjI,4BAA4B,EAAE+H,qBAAS,CAACI;AACzC,CAAC;AAED,IAAMS,YAAY,GAAG;EACpB;AACD;AACA;EACCtD,YAAY,EAAE,KAAK;EAEnB;AACD;AACA;EACCO,sBAAsB,EAAEgD,oCAAa;EAErC;AACD;AACA;EACC1C,aAAa,EAAE2C,gBAAI;EAEnB;AACD;AACA;EACC;EACA1C,OAAO,EAAE,sEAAsE;EAE/E;AACD;AACA;EACCC,iBAAiB,EAAE0C,6BAAiB;EAEpC;AACD;AACA;EACCtD,cAAc,EAAE,OAAO;EAEvB;AACD;AACA;EACCM,kBAAkB,EAAE,KAAK;EAEzB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAO,KAAK,EAAEyB,qBAAS,CAACiB,GAAG;EAEpB;AACD;AACA;;EAEC;AACD;AACA;EACCrD,UAAU,EAAE,IAAI;EAEhB;AACD;AACA;AACA;EACCxE,sBAAsB,EAAE,IAAI;EAE5B;AACD;AACA;AACA;AACA;EACCE,0BAA0B,EAAE,IAAI;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrB,4BAA4B,EAAE;AAC/B,CAAC;AAED,SAAS6H,gBAAgBA,CAAC1K,KAAK,EAAE;EAChCA,KAAK,GAAA7B,aAAA,KAAQ6B,KAAK,CAAE;EAEpB,KAAK,IAAMf,GAAG,IAAIwM,YAAY,EAAE;IAC/B,IAAIzL,KAAK,CAACf,GAAG,CAAC,KAAK4F,SAAS,EAAE;MAC7B7E,KAAK,CAACf,GAAG,CAAC,GAAGwM,YAAY,CAACxM,GAAG,CAAC;IAC/B;EACD;EAEA,OAAOe,KAAK;AACb;AAAC,IAAA8L,QAAA,GAAAC,OAAA,cAEcvB,gBAAgB;AAE/B,SAAS9C,cAAcA,CAACsE,CAAC,EAAEC,CAAC,EAAE;EAC7B,IAAID,CAAC,CAAC3N,MAAM,KAAK4N,CAAC,CAAC5N,MAAM,EAAE;IAC1B,OAAO,KAAK;EACb;EACA,IAAIU,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGiN,CAAC,CAAC3N,MAAM,EAAE;IACpB,IAAI2N,CAAC,CAACjN,CAAC,CAAC,KAAKkN,CAAC,CAAClN,CAAC,CAAC,EAAE;MAClB,OAAO,KAAK;IACb;IACAA,CAAC,EAAE;EACJ;EACA,OAAO,IAAI;AACZ","ignoreList":[]}