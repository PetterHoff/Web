{"version":3,"file":"PhoneInput.js","names":["_react","_interopRequireDefault","require","_propTypes","_usePhoneDigits3","_PropTypes","_excluded","obj","__esModule","_extends","Object","assign","bind","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_slicedToArray","arr","_arrayWithHoles","_iterableToArrayLimit","_unsupportedIterableToArray","_nonIterableRest","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","constructor","name","Array","from","test","len","arr2","r","l","t","Symbol","iterator","e","u","a","f","next","done","push","value","isArray","_objectWithoutProperties","excluded","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","indexOf","propertyIsEnumerable","sourceKeys","keys","PhoneInput","_ref","ref","Component","country","defaultCountry","_ref$useNationalForma","useNationalFormatForDefaultCountryValue","onChange","metadata","international","withCountryCallingCode","rest","_usePhoneDigits","usePhoneDigits","_usePhoneDigits2","phoneDigits","setPhoneDigits","createElement","React","forwardRef","propTypes","PropTypes","string","func","isRequired","bool","elementType","metadataType","_default","exports"],"sources":["../source/PhoneInput.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport usePhoneDigits from './usePhoneDigits.js'\r\n\r\nimport { metadata as metadataType } from './PropTypes.js'\r\n\r\nfunction PhoneInput({\r\n\tComponent,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue = true,\r\n\tvalue,\r\n\tonChange,\r\n\tmetadata,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\t...rest\r\n}, ref) {\r\n\t// \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n\tconst [\r\n\t\tphoneDigits,\r\n\t\tsetPhoneDigits\r\n\t] = usePhoneDigits({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tcountry,\r\n\t\tdefaultCountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\tmetadata\r\n\t})\r\n\treturn (\r\n\t\t<Component\r\n\t\t\t{...rest}\r\n\t\t\tref={ref}\r\n\t\t\tmetadata={metadata}\r\n\t\t\tinternational={international}\r\n\t\t\twithCountryCallingCode={withCountryCallingCode}\r\n\t\t\tcountry={country || defaultCountry}\r\n\t\t\tvalue={phoneDigits}\r\n\t\t\tonChange={setPhoneDigits} />\r\n\t)\r\n}\r\n\r\nPhoneInput = React.forwardRef(PhoneInput)\r\n\r\nPhoneInput.propTypes = {\r\n\t/**\r\n\t * The phone number (in E.164 format).\r\n\t * Examples: `\"+12\"`, `\"+12133734253\"`.\r\n\t * An \"empty\" `value` could be represented by any \"falsy\" value like `undefined`, `null` or an empty string `\"\"`.\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t * Updates the `value` property (to `undefined` in case it's empty).\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * as a national phone number (example: `(213) 373-4253`),\r\n\t * or as an international phone number without \"country calling code\"\r\n\t * if `international` property is passed (example: `213 373 4253`).\r\n\t * Example: \"US\".\r\n\t * If no `country` is passed then `value`\r\n\t * is formatted as an international phone number.\r\n\t * (example: `+1 213 373 4253`)\r\n\t */\r\n\tcountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * A two-letter country code for formatting `value`\r\n\t * when a user inputs a national phone number (example: `(213) 373-4253`).\r\n\t * The user can still input a phone number in international format.\r\n\t * Example: \"US\".\r\n\t * `country` and `defaultCountry` properties are mutually exclusive.\r\n\t */\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If `country` property is passed along with `international={true}` property\r\n\t * then the phone number will be input in \"international\" format for that `country`\r\n\t * (without \"country calling code\").\r\n\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t * (without \"country calling code\" `+1`).\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If `country` and `international` properties are set,\r\n\t * then by default it won't include \"country calling code\" in the input field.\r\n\t * To change that, pass `withCountryCallingCode` property,\r\n\t * and it will include \"country calling code\" in the input field.\r\n\t */\r\n\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t/**\r\n\t * A component that renders the `<input/>` itself and also\r\n\t * parses and formats its `value` as the user inputs it.\r\n\t */\r\n\tComponent: PropTypes.elementType.isRequired,\r\n\r\n\t/**\r\n\t * When `defaultCountry` is defined and the initial `value` corresponds to `defaultCountry`,\r\n\t * then the `value` will be formatted as a national phone number by default.\r\n\t * To format the initial `value` of `defaultCountry` as an international number instead\r\n\t * set `useNationalFormatForDefaultCountryValue` property to `true`.\r\n\t */\r\n\tuseNationalFormatForDefaultCountryValue: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t */\r\n\tmetadata: metadataType\r\n}\r\n\r\nexport default PhoneInput"],"mappings":"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","ignoreList":[]}