{"version":3,"file":"phoneInputHelpers.js","names":["_core","_interopRequireWildcard","require","_getInternationalPhoneNumberPrefix","_interopRequireDefault","obj","__esModule","_getRequireWildcardCache","e","WeakMap","r","t","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","getPreSelectedCountry","_ref","value","phoneNumber","defaultCountry","getAnyCountry","countries","required","metadata","country","couldNumberBelongToCountry","indexOf","undefined","length","getCountrySelectOptions","_ref2","countryNames","addInternationalOption","compareStringsLocales","_compareStrings","compareStrings","countrySelectOptions","map","label","sort","b","unshift","ZZ","parsePhoneNumber","parsePhoneNumber_","generateNationalNumberDigits","formatNational","replace","getPhoneDigitsForNewCountry","phoneDigits","_ref3","prevCountry","newCountry","useNationalFormat","getInternationalPhoneNumberPrefix","getCountryCallingCode","stripCountryCallingCode","newCountryPrefix","defaultValue","e164","number","asYouType","AsYouType","input","getNumberValue","partial_national_significant_number","getNationalSignificantNumberDigits","concat","trimNumber","nationalSignificantNumberPart","overflowDigitsCount","getMaxNumberLength","slice","Metadata","selectNumberingPlan","numberingPlan","possibleLengths","getCountryForPartialE164Number","partialE164Number","_ref4","latestCountrySelectedByUser","derived_country","getCountryFromPossiblyIncompleteInternationalPhoneNumber","onPhoneDigitsChange","_ref5","prevPhoneDigits","countryRequired","international","limitMaxLength","countryCallingCodeEditable","prefix","hasStartedTypingInNationalNumberDigitsHavingInputValueSelected","convertInternationalPhoneDigitsToNational","formatter","getNumber","getCountry","locales","String","prototype","localeCompare","countryCallingCodePrefix","_i","_Object$keys","keys","country_calling_codes","country_calling_code","nationalNumber","intlPhoneNumberPrefix","getInitialPhoneDigits","_ref6"],"sources":["../../source/helpers/phoneInputHelpers.js"],"sourcesContent":["import parsePhoneNumber_, {\r\n\tgetCountryCallingCode,\r\n\tAsYouType,\r\n\tMetadata\r\n} from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Decides which country should be pre-selected\r\n * when the phone number input component is first mounted.\r\n * @param  {object?} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {string?} country - Pre-defined country (two-letter code).\r\n * @param  {string[]?} countries - A list of countries available.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string?}\r\n */\r\nexport function getPreSelectedCountry({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\tlet country\r\n\r\n\t// If can get country from E.164 phone number\r\n\t// then it overrides the `country` passed (or not passed).\r\n\tif (phoneNumber && phoneNumber.country) {\r\n\t\t// `country` will be left `undefined` in case of non-detection.\r\n\t\tcountry = phoneNumber.country\r\n\t} else if (defaultCountry) {\r\n\t\tif (!value || couldNumberBelongToCountry(value, defaultCountry, metadata)) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// Only pre-select a country if it's in the available `countries` list.\r\n\tif (countries && countries.indexOf(country) < 0) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// If there will be no \"International\" option\r\n\t// then some `country` must be selected.\r\n\t// It will still be the wrong country though.\r\n\t// But still country `<select/>` can't be left in a broken state.\r\n\tif (!country && required && countries && countries.length > 0) {\r\n\t\tcountry = getAnyCountry()\r\n\t\t// noCountryMatchesTheNumber = true\r\n\t}\r\n\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Generates a sorted list of country `<select/>` options.\r\n * @param  {string[]} countries - A list of two-letter (\"ISO 3166-1 alpha-2\") country codes.\r\n * @param  {object} labels - Custom country labels. E.g. `{ RU: 'Россия', US: 'США', ... }`.\r\n * @param  {boolean} addInternationalOption - Whether should include \"International\" option at the top of the list.\r\n * @return {object[]} A list of objects having shape `{ value : string, label : string }`.\r\n */\r\nexport function getCountrySelectOptions({\r\n\tcountries,\r\n\tcountryNames,\r\n\taddInternationalOption,\r\n\t// `locales` are only used in country name comparator:\r\n\t// depending on locale, string sorting order could be different.\r\n\tcompareStringsLocales,\r\n\tcompareStrings: _compareStrings\r\n}) {\r\n\t// Default country name comparator uses `String.localeCompare()`.\r\n\tif (!_compareStrings) {\r\n\t\t_compareStrings = compareStrings\r\n\t}\r\n\r\n\t// Generates a `<Select/>` option for each country.\r\n\tconst countrySelectOptions = countries.map((country) => ({\r\n\t\tvalue: country,\r\n\t\t// All `locale` country names included in this library\r\n\t\t// include all countries (this is checked at build time).\r\n\t\t// The only case when a country name might be missing\r\n\t\t// is when a developer supplies their own `labels` property.\r\n\t\t// To guard against such cases, a missing country name\r\n\t\t// is substituted by country code.\r\n\t\tlabel: countryNames[country] || country\r\n\t}))\r\n\r\n\t// Sort the list of countries alphabetically.\r\n\tcountrySelectOptions.sort((a, b) => _compareStrings(a.label, b.label, compareStringsLocales))\r\n\r\n\t// Add the \"International\" option to the country list (if suitable)\r\n\tif (addInternationalOption) {\r\n\t\tcountrySelectOptions.unshift({\r\n\t\t\tlabel: countryNames.ZZ\r\n\t\t})\r\n\t}\r\n\r\n\treturn countrySelectOptions\r\n}\r\n\r\n/**\r\n * Parses a E.164 phone number to an instance of `PhoneNumber` class.\r\n * @param {string?} value = E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {object} Object having shape `{ country: string?, countryCallingCode: string, number: string }`. `PhoneNumber`: https://gitlab.com/catamphetamine/libphonenumber-js#phonenumber.\r\n * @example\r\n * parsePhoneNumber('+78005553535')\r\n */\r\nexport function parsePhoneNumber(value, metadata) {\r\n\treturn parsePhoneNumber_(value || '', metadata)\r\n}\r\n\r\n/**\r\n * Generates national number digits for a parsed phone.\r\n * May prepend national prefix.\r\n * The phone number must be a complete and valid phone number.\r\n * @param  {object} phoneNumber - An instance of `PhoneNumber` class.\r\n * @param  {object} metadata - `libphonenumber-js` metadata\r\n * @return {string}\r\n * @example\r\n * getNationalNumberDigits({ country: 'RU', phone: '8005553535' })\r\n * // returns '88005553535'\r\n */\r\nexport function generateNationalNumberDigits(phoneNumber) {\r\n\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n}\r\n\r\n/**\r\n * Migrates parsed `<input/>` `value` for the newly selected `country`.\r\n * @param {string?} phoneDigits - Phone number digits (and `+`) parsed from phone number `<input/>` (it's not the same as the `value` property).\r\n * @param {string?} prevCountry - Previously selected country.\r\n * @param {string?} newCountry - Newly selected country. Can't be same as previously selected country.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @param {boolean} useNationalFormat - whether should attempt to convert from international to national number for the new country.\r\n * @return {string?}\r\n */\r\nexport function getPhoneDigitsForNewCountry(phoneDigits, {\r\n\tprevCountry,\r\n\tnewCountry,\r\n\tmetadata,\r\n\tuseNationalFormat\r\n}) {\r\n\tif (prevCountry === newCountry) {\r\n\t\treturn phoneDigits\r\n\t}\r\n\r\n\t// If `parsed_input` is empty\r\n\t// then no need to migrate anything.\r\n\tif (!phoneDigits) {\r\n\t\tif (useNationalFormat) {\r\n\t\t\treturn ''\r\n\t\t} else {\r\n\t\t\tif (newCountry) {\r\n\t\t\t\t// If `phoneDigits` is empty then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t}\r\n\t\t\treturn ''\r\n\t\t}\r\n\t}\r\n\r\n\t// If switching to some country.\r\n\t// (from \"International\" or another country)\r\n\t// If switching from \"International\" then `phoneDigits` starts with a `+`.\r\n\t// Otherwise it may or may not start with a `+`.\r\n\tif (newCountry) {\r\n\t\t// If the phone number was entered in international format\r\n\t\t// then migrate it to the newly selected country.\r\n\t\t// The phone number may be incomplete.\r\n\t\t// The phone number entered not necessarily starts with\r\n\t\t// the previously selected country phone prefix.\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\t// If the international phone number is for the new country\r\n\t\t\t// then convert it to local if required.\r\n\t\t\tif (useNationalFormat) {\r\n\t\t\t\t// // If a phone number is being input in international form\r\n\t\t\t\t// // and the country can already be derived from it,\r\n\t\t\t\t// // and if it is the new country, then format as a national number.\r\n\t\t\t\t// const derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(phoneDigits, metadata)\r\n\t\t\t\t// if (derived_country === newCountry) {\r\n\t\t\t\t// \treturn stripCountryCallingCode(phoneDigits, derived_country, metadata)\r\n\t\t\t\t// }\r\n\r\n\t\t\t\t// Actually, the two countries don't necessarily need to match:\r\n\t\t\t\t// the condition could be looser here, because several countries\r\n\t\t\t\t// might share the same international phone number format\r\n\t\t\t\t// (for example, \"NANPA\" countries like US, Canada, etc).\r\n\t\t\t\t// The looser condition would be just \"same nternational phone number format\"\r\n\t\t\t\t// which would mean \"same country calling code\" in the context of `libphonenumber-js`.\r\n\t\t\t\tif (phoneDigits.indexOf('+' + getCountryCallingCode(newCountry, metadata)) === 0) {\r\n\t\t\t\t\treturn stripCountryCallingCode(phoneDigits, newCountry, metadata)\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Simply discard the previously entered international phone number,\r\n\t\t\t\t// because otherwise any \"smart\" transformation like getting the\r\n\t\t\t\t// \"national (significant) number\" part and then prepending the\r\n\t\t\t\t// newly selected country's \"country calling code\" to it\r\n\t\t\t\t// would just be confusing for a user without being actually useful.\r\n\t\t\t\treturn ''\r\n\r\n\t\t\t\t// // Simply strip the leading `+` character\r\n\t\t\t\t// // therefore simply converting all digits into a \"local\" phone number.\r\n\t\t\t\t// // https://github.com/catamphetamine/react-phone-number-input/issues/287\r\n\t\t\t\t// return phoneDigits.slice(1)\r\n\t\t\t}\r\n\r\n\t\t\tif (prevCountry) {\r\n\t\t\t\tconst newCountryPrefix = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(newCountryPrefix) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn newCountryPrefix\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tconst defaultValue = getInternationalPhoneNumberPrefix(newCountry, metadata)\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is the same\r\n\t\t\t\t// as for the new `country`, then leave `phoneDigits` as is.\r\n\t\t\t\tif (phoneDigits.indexOf(defaultValue) === 0) {\r\n\t\t\t\t\treturn phoneDigits\r\n\t\t\t\t}\r\n\t\t\t\t// If `phoneDigits`'s country calling code part is not the same\r\n\t\t\t\t// as for the new `country`, then set `phoneDigits` to\r\n\t\t\t\t// `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\treturn defaultValue\r\n\t\t\t}\r\n\r\n\t\t\t// // If the international phone number already contains\r\n\t\t\t// // any country calling code then trim the country calling code part.\r\n\t\t\t// // (that could also be the newly selected country phone code prefix as well)\r\n\t\t\t// // `phoneDigits` doesn't neccessarily belong to `prevCountry`.\r\n\t\t\t// // (e.g. if a user enters an international number\r\n\t\t\t// //  not belonging to any of the reduced `countries` list).\r\n\t\t\t// phoneDigits = stripCountryCallingCode(phoneDigits, prevCountry, metadata)\r\n\r\n\t\t\t// // Prepend country calling code prefix\r\n\t\t\t// // for the newly selected country.\r\n\t\t\t// return e164(phoneDigits, newCountry, metadata) || `+${getCountryCallingCode(newCountry, metadata)}`\r\n\t\t}\r\n\t}\r\n\t// If switching to \"International\" from a country.\r\n\telse {\r\n\t\t// If the phone number was entered in national format.\r\n\t\tif (phoneDigits[0] !== '+') {\r\n\t\t\t// Format the national phone number as an international one.\r\n\t\t\t// The phone number entered not necessarily even starts with\r\n\t\t\t// the previously selected country phone prefix.\r\n\t\t\t// Even if the phone number belongs to whole another country\r\n\t\t\t// it will still be parsed into some national phone number.\r\n\t\t\t//\r\n\t\t\t// Ignore the now-uncovered `|| ''` code branch:\r\n\t\t\t// previously `e164()` function could return an empty string\r\n\t\t\t// even when `phoneDigits` were not empty.\r\n\t\t\t// Now it always returns some `value` when there're any `phoneDigits`.\r\n\t\t\t// Still, didn't remove the `|| ''` code branch just in case\r\n\t\t\t// that logic changes somehow in some future, so there're no\r\n\t\t\t// possible bugs related to that.\r\n\t\t\t//\r\n\t\t\t// (ignore the `|| ''` code branch)\r\n\t\t\t/* istanbul ignore next */\r\n\t\t\treturn e164(phoneDigits, prevCountry, metadata) || ''\r\n\t\t}\r\n\t}\r\n\r\n\treturn phoneDigits\r\n}\r\n\r\n/**\r\n * Converts phone number digits to a (possibly incomplete) E.164 phone number.\r\n * @param  {string?} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string?} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function e164(number, country, metadata) {\r\n\tif (!number) {\r\n\t\treturn\r\n\t}\r\n\t// If the phone number is being input in international format.\r\n\tif (number[0] === '+') {\r\n\t\t// If it's just the `+` sign then return nothing.\r\n\t\tif (number === '+') {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Return a E.164 phone number.\r\n\t\t//\r\n\t\t// Could return `number` \"as is\" here, but there's a possibility\r\n\t\t// that some user might incorrectly input an international number\r\n\t\t// with a \"national prefix\". Such numbers aren't considered valid,\r\n\t\t// but `libphonenumber-js` is \"forgiving\" when it comes to parsing\r\n\t\t// user's input, and this input component follows that behavior.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country, metadata)\r\n\t\tasYouType.input(number)\r\n\t\t// This function would return `undefined` only when `number` is `\"+\"`,\r\n\t\t// but at this point it is known that `number` is not `\"+\"`.\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\t// For non-international phone numbers\r\n\t// an accompanying country code is required.\r\n\t// The situation when `country` is `undefined`\r\n\t// and a non-international phone number is passed\r\n\t// to this function shouldn't happen.\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\tconst partial_national_significant_number = getNationalSignificantNumberDigits(number, country, metadata)\r\n\t//\r\n\t// Even if no \"national (significant) number\" digits have been input,\r\n\t// still return a non-`undefined` value.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t//\r\n\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t// a \"weird\" behavior.\r\n\t//\r\n\t// if (partial_national_significant_number) {\r\n\t\treturn `+${getCountryCallingCode(country, metadata)}${partial_national_significant_number || ''}`\r\n\t// }\r\n}\r\n\r\n/**\r\n * Trims phone number digits if they exceed the maximum possible length\r\n * for a national (significant) number for the country.\r\n * @param  {string} number - A possibly incomplete phone number digits string. Can be a possibly incomplete E.164 phone number.\r\n * @param  {string} country\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} Can be empty.\r\n */\r\nexport function trimNumber(number, country, metadata) {\r\n\tconst nationalSignificantNumberPart = getNationalSignificantNumberDigits(number, country, metadata)\r\n\tif (nationalSignificantNumberPart) {\r\n\t\tconst overflowDigitsCount = nationalSignificantNumberPart.length - getMaxNumberLength(country, metadata)\r\n\t\tif (overflowDigitsCount > 0) {\r\n\t\t\treturn number.slice(0, number.length - overflowDigitsCount)\r\n\t\t}\r\n\t}\r\n\treturn number\r\n}\r\n\r\nfunction getMaxNumberLength(country, metadata) {\r\n\t// Get \"possible lengths\" for a phone number of the country.\r\n\tmetadata = new Metadata(metadata)\r\n\tmetadata.selectNumberingPlan(country)\r\n\t// Return the last \"possible length\".\r\n\treturn metadata.numberingPlan.possibleLengths()[metadata.numberingPlan.possibleLengths().length - 1]\r\n}\r\n\r\n// If the phone number being input is an international one\r\n// then tries to derive the country from the phone number.\r\n// (regardless of whether there's any country currently selected)\r\n/**\r\n * @param {string} partialE164Number - A possibly incomplete E.164 phone number.\r\n * @param {string?} country - Currently selected country.\r\n * @param {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param {string?} defaultCountry — Default country.\r\n * @param {string?} latestCountrySelectedByUser — The latest country that has been manually selected by the user.\r\n * @param {boolean?} required — Whether \"International\" option could be selected, meaning \"no country is selected\".\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryForPartialE164Number(partialE164Number, {\r\n\tcountry,\r\n\tcountries,\r\n\tdefaultCountry,\r\n\tlatestCountrySelectedByUser,\r\n\trequired,\r\n\tmetadata\r\n}) {\r\n\t// `partialE164Number` is supposed to be an E.164 phone number.\r\n\r\n\t// `partialE164Number` is supposed to be non-empty when calling this function\r\n\t// so it doesn't check for `if (!partialE164Number)`.\r\n\r\n\tif (partialE164Number === '+') {\r\n\t\t// Don't change the currently selected country yet.\r\n\t\treturn country\r\n\t}\r\n\r\n\tconst derived_country = getCountryFromPossiblyIncompleteInternationalPhoneNumber(partialE164Number, metadata)\r\n\r\n\t// If a phone number is being input in international form\r\n\t// and the country can already be derived from it,\r\n\t// then select that country.\r\n\tif (derived_country) {\r\n\t\tif (!countries || (countries.indexOf(derived_country) >= 0)) {\r\n\t\t\treturn derived_country\r\n\t\t} else {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t}\r\n\t// Otherwise, if the phone number doesn't correspond to any particular country.\r\n\t// If some country was previously selected.\r\n\telse if (country) {\r\n\t\t// If the international phone number entered could still correspond to the previously selected country\r\n\t\t// and also to some other country or countries corresponding to the same calling code\r\n\t\t// then it should reset the currently selected country to reflect the ambiguity.\r\n\t\tif (couldNumberBelongToCountry(partialE164Number, country, metadata)) {\r\n\t\t\t// Reset the country either to the latest one that was manually selected by the user\r\n\t\t\t// or to the default country or just reset the country selection.\r\n\t\t\tif (latestCountrySelectedByUser && couldNumberBelongToCountry(partialE164Number, latestCountrySelectedByUser, metadata)) {\r\n\t\t\t\treturn latestCountrySelectedByUser\r\n\t\t\t} else if (defaultCountry && couldNumberBelongToCountry(partialE164Number, defaultCountry, metadata)) {\r\n\t\t\t\treturn defaultCountry\r\n\t\t\t} else {\r\n\t\t\t\tif (!required) {\r\n\t\t\t\t\t// Just reset the currently selected country.\r\n\t\t\t\t\treturn undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// If \"International\" country option has not been disabled\r\n\t\t\t// and the international phone number entered doesn't necessarily correspond to\r\n\t\t\t// the currently selected country and it could not possibly correspond to it\r\n\t\t\t// then reset the currently selected country.\r\n\t\t\tif (!required) {\r\n\t\t\t\treturn undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Don't change the currently selected country.\r\n\treturn country\r\n}\r\n\r\n/**\r\n * Parses `<input/>` value. Derives `country` from `input`. Derives an E.164 `value`.\r\n * @param  {string?} phoneDigits — Parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} prevPhoneDigits — Previous parsed `<input/>` value. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n * @param  {string?} country - Currently selected country.\r\n * @param  {string?} defaultCountry - Default country.\r\n * @param  {string?} latestCountrySelectedByUser - The latest country that has been manually selected by the user.\r\n * @param  {boolean} countryRequired - Is selecting some country required.\r\n * @param  {function} getAnyCountry - Can be used to get any country when selecting some country required.\r\n * @param  {string[]?} countries - A list of available countries. If not passed then \"all countries\" are assumed.\r\n * @param  {boolean} international - Set to `true` to force international phone number format (leading `+`). Set to `false` to force \"national\" phone number format. Is `undefined` by default.\r\n * @param  {boolean} limitMaxLength — Whether to enable limiting phone number max length.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {object} An object of shape `{ phoneDigits, country, value }`. `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`. The returned `phoneDigits` shouldn't be used anywhere except for passing it as `prevPhoneDigits` parameter to this same function on next input change event.\r\n */\r\nexport function onPhoneDigitsChange(phoneDigits, {\r\n\tprevPhoneDigits,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tlatestCountrySelectedByUser,\r\n\tcountryRequired,\r\n\tgetAnyCountry,\r\n\tcountries,\r\n\tinternational,\r\n\tlimitMaxLength,\r\n\tcountryCallingCodeEditable,\r\n\tmetadata\r\n}) {\r\n\t// When the input is in `international` and `countryCallingCodeEditable={false}` mode,\r\n\t// the `country` should not change. If the user attempted to overwrite the country callling code part,\r\n\t// the component should reset it back to the correct country calling code for the `country`.\r\n\tif (international && countryCallingCodeEditable === false) {\r\n\t\tif (country) {\r\n\t\t\t// For international phone numbers written with non-editable country calling code,\r\n\t\t\t// the `<input/>` value must always start with that non-editable country calling code.\r\n\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t// If the input value doesn't start with the non-editable country calling code,\r\n\t\t\t// it should be fixed.\r\n\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\tlet value\r\n\t\t\t\t// If a phone number input is declared as\r\n\t\t\t\t// `international: true` and `countryCallingCodeEditable: false`,\r\n\t\t\t\t// then the value of the `<input/>` is gonna be non-empty at all times,\r\n\t\t\t\t// even before the user has started to input any digits in the input field,\r\n\t\t\t\t// because the country calling code is always there by design.\r\n\t\t\t\t//\r\n\t\t\t\t// The fact that the input value is always non-empty results in a side effect:\r\n\t\t\t\t// whenever a user tabs into such input field, its value gets automatically selected.\r\n\t\t\t\t// If at that moment in time the user starts typing in the national digits of the phone number,\r\n\t\t\t\t// the selected `<input/>` value gets automatically replaced by those typed-in digits\r\n\t\t\t\t// so the value changes from `+xxx` to `y`, because inputting anything while having\r\n\t\t\t\t// the `<input/>` value selected results in erasing that `<input/>` value.\r\n\t\t\t\t//\r\n\t\t\t\t// This component handles such cases by restoring the `<input/>` value to what\r\n\t\t\t\t// it should be in such cases: `+xxxy`.\r\n\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t//\r\n\t\t\t\tconst hasStartedTypingInNationalNumberDigitsHavingInputValueSelected = phoneDigits && phoneDigits[0] !== '+'\r\n\t\t\t\tif (hasStartedTypingInNationalNumberDigitsHavingInputValueSelected) {\r\n\t\t\t\t\t// Fix the input value to what it should be: `y` → `+xxxy`.\r\n\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// In other cases, simply reset the `<input/>` value, because there're only two\r\n\t\t\t\t\t// possible cases:\r\n\t\t\t\t\t// * The user has selected the `<input/>` value and then hit Delete/Backspace to erase it.\r\n\t\t\t\t\t// * The user has pasted an international phone number for another country calling code,\r\n\t\t\t\t\t//   which is considered a non-valid value.\r\n\t\t\t\t\tphoneDigits = prefix\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tphoneDigits,\r\n\t\t\t\t\tvalue,\r\n\t\t\t\t\tcountry\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `international` property is `false`, then it means\r\n\t// \"enforce national-only format during input\",\r\n\t// so, if that's the case, then remove all `+` characters,\r\n\t// but only if some country is currently selected.\r\n\t// (not if \"International\" country is selected).\r\n\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// Trim the input to not exceed the maximum possible number length.\r\n\tif (phoneDigits && country && limitMaxLength) {\r\n\t\tphoneDigits = trimNumber(phoneDigits, country, metadata)\r\n\t}\r\n\r\n\t// If this `onChange()` event was triggered\r\n\t// as a result of selecting \"International\" country,\r\n\t// then force-prepend a `+` sign if the phone number\r\n\t// `<input/>` value isn't in international format.\r\n\t// Also, force-prepend a `+` sign if international\r\n\t// phone number input format is set.\r\n\tif (phoneDigits && phoneDigits[0] !== '+' && (!country || international)) {\r\n\t\tphoneDigits = '+' + phoneDigits\r\n\t}\r\n\r\n\t// If the previously entered phone number\r\n\t// has been entered in international format\r\n\t// and the user decides to erase it,\r\n\t// then also reset the `country`\r\n\t// because it was most likely automatically selected\r\n\t// while the user was typing in the phone number\r\n\t// in international format.\r\n\t// This fixes the issue when a user is presented\r\n\t// with a phone number input with no country selected\r\n\t// and then types in their local phone number\r\n\t// then discovers that the input's messed up\r\n\t// (a `+` has been prepended at the start of their input\r\n\t//  and a random country has been selected),\r\n\t// decides to undo it all by erasing everything\r\n\t// and then types in their local phone number again\r\n\t// resulting in a seemingly correct phone number\r\n\t// but in reality that phone number has incorrect country.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/273\r\n\tif (!phoneDigits && prevPhoneDigits && prevPhoneDigits[0] === '+') {\r\n\t\tif (international) {\r\n\t\t\tcountry = undefined\r\n\t\t} else {\r\n\t\t\tcountry = defaultCountry\r\n\t\t}\r\n\t}\r\n\t// Also resets such \"randomly\" selected country\r\n\t// as soon as the user erases the number\r\n\t// digit-by-digit up to the leading `+` sign.\r\n\tif (phoneDigits === '+' && prevPhoneDigits && prevPhoneDigits[0] === '+' && prevPhoneDigits.length > '+'.length) {\r\n\t\tcountry = undefined\r\n\t}\r\n\r\n\t// Generate the new `value` property.\r\n\tlet value\r\n\tif (phoneDigits) {\r\n\t\tif (phoneDigits[0] === '+') {\r\n\t\t\tif (phoneDigits === '+') {\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else if (country && getInternationalPhoneNumberPrefix(country, metadata).indexOf(phoneDigits) === 0) {\r\n\t\t\t\t// Selected a `country` and started inputting an\r\n\t\t\t\t// international phone number for this country\r\n\t\t\t\t// but hasn't input any \"national (significant) number\" digits yet.\r\n\t\t\t\t// In that case, assume `value` be `undefined`.\r\n\t\t\t\t//\r\n\t\t\t\t// For example, if selected `country` `\"US\"`\r\n\t\t\t\t// and started inputting phone number `\"+1\"`\r\n\t\t\t\t// then `value` `undefined` will be returned from this function.\r\n\t\t\t\t//\r\n\t\t\t\tvalue = undefined\r\n\t\t\t} else {\r\n\t\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\t// Derive the country from the phone number.\r\n\t// (regardless of whether there's any country currently selected,\r\n\t//  because there could be several countries corresponding to one country calling code)\r\n\tif (value) {\r\n\t\tcountry = getCountryForPartialE164Number(value, {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tdefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser,\r\n\t\t\t// `countryRequired` flag is not passed here.\r\n\t\t\t// Instead, it's explicitly checked a bit later in the code.\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\t\t// If `international` property is `false`, then it means\r\n\t\t// \"enforce national-only format during input\",\r\n\t\t// so, if that's the case, then remove all `+` characters,\r\n\t\t// but only if some country is currently selected.\r\n\t\t// (not if \"International\" country is selected).\r\n\t\tif (international === false && country && phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\tphoneDigits = convertInternationalPhoneDigitsToNational(phoneDigits, country, metadata)\r\n\t\t\t// Re-calculate `value` because `phoneDigits` has changed.\r\n\t\t\tvalue = e164(phoneDigits, country, metadata)\r\n\t\t}\r\n\t}\r\n\r\n\tif (!country && countryRequired) {\r\n\t\tcountry = defaultCountry || getAnyCountry()\r\n\t}\r\n\r\n\treturn {\r\n\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t// `prevPhoneDigits` parameter to this same function on next input change event.\r\n\t\tphoneDigits,\r\n\t\tcountry,\r\n\t\tvalue\r\n\t}\r\n}\r\n\r\nfunction convertInternationalPhoneDigitsToNational(input, country, metadata) {\r\n\t// Handle the case when a user might have pasted\r\n\t// a phone number in international format.\r\n\tif (input.indexOf(getInternationalPhoneNumberPrefix(country, metadata)) === 0) {\r\n\t\t// Create \"as you type\" formatter.\r\n\t\tconst formatter = new AsYouType(country, metadata)\r\n\t\t// Input partial national phone number.\r\n\t\tformatter.input(input)\r\n\t\t// Return the parsed partial national phone number.\r\n\t\tconst phoneNumber = formatter.getNumber()\r\n\t\tif (phoneNumber) {\r\n\t\t\t// Transform the number to a national one,\r\n\t\t\t// and remove all non-digits.\r\n\t\t\treturn phoneNumber.formatNational().replace(/\\D/g, '')\r\n\t\t} else {\r\n\t\t\treturn ''\r\n\t\t}\r\n\t} else {\r\n\t\t// Just remove the `+` sign.\r\n\t\treturn input.replace(/\\D/g, '')\r\n\t}\r\n}\r\n\r\n/**\r\n * Determines the country for a given (possibly incomplete) E.164 phone number.\r\n * @param  {string} number - A possibly incomplete E.164 phone number.\r\n * @param  {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string?}\r\n */\r\nexport function getCountryFromPossiblyIncompleteInternationalPhoneNumber(number, metadata) {\r\n\tconst formatter = new AsYouType(null, metadata)\r\n\tformatter.input(number)\r\n\t// // `001` is a special \"non-geograpical entity\" code\r\n\t// // in Google's `libphonenumber` library.\r\n\t// if (formatter.getCountry() === '001') {\r\n\t// \treturn\r\n\t// }\r\n\treturn formatter.getCountry()\r\n}\r\n\r\n/**\r\n * Compares two strings.\r\n * A helper for `Array.sort()`.\r\n * @param {string} a — First string.\r\n * @param {string} b — Second string.\r\n * @param {(string[]|string)} [locales] — The `locales` argument of `String.localeCompare`.\r\n */\r\nexport function compareStrings(a, b, locales) {\r\n  // Use `String.localeCompare` if it's available.\r\n  // https://developer.mozilla.org/ru/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\r\n  // Which means everyone except IE <= 10 and Safari <= 10.\r\n  // `localeCompare()` is available in latest Node.js versions.\r\n  /* istanbul ignore else */\r\n  if (String.prototype.localeCompare) {\r\n    return a.localeCompare(b, locales);\r\n  }\r\n  /* istanbul ignore next */\r\n  return a < b ? -1 : (a > b ? 1 : 0);\r\n}\r\n\r\n/**\r\n * Strips `+${countryCallingCode}` prefix from an E.164 phone number.\r\n * @param {string} number - (possibly incomplete) E.164 phone number.\r\n * @param {string?} country - A possible country for this phone number.\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string}\r\n */\r\nexport function stripCountryCallingCode(number, country, metadata) {\r\n\t// Just an optimization, so that it\r\n\t// doesn't have to iterate through all country calling codes.\r\n\tif (country) {\r\n\t\tconst countryCallingCodePrefix = '+' + getCountryCallingCode(country, metadata)\r\n\r\n\t\t// If `country` fits the actual `number`.\r\n\t\tif (number.length < countryCallingCodePrefix.length) {\r\n\t\t\tif (countryCallingCodePrefix.indexOf(number) === 0) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (number.indexOf(countryCallingCodePrefix) === 0) {\r\n\t\t\t\treturn number.slice(countryCallingCodePrefix.length)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If `country` doesn't fit the actual `number`.\r\n\t// Try all available country calling codes.\r\n\tfor (const country_calling_code of Object.keys(metadata.country_calling_codes)) {\r\n\t\tif (number.indexOf(country_calling_code) === '+'.length) {\r\n\t\t\treturn number.slice('+'.length + country_calling_code.length)\r\n\t\t}\r\n\t}\r\n\r\n\treturn ''\r\n}\r\n\r\n/**\r\n * Parses a partially entered national phone number digits\r\n * (or a partially entered E.164 international phone number)\r\n * and returns the national significant number part.\r\n * National significant number returned doesn't come with a national prefix.\r\n * @param {string} number - National number digits. Or possibly incomplete E.164 phone number.\r\n * @param {string?} country\r\n * @param {object} metadata - `libphonenumber-js` metadata.\r\n * @return {string} [result]\r\n */\r\nexport function getNationalSignificantNumberDigits(number, country, metadata) {\r\n\t// Create \"as you type\" formatter.\r\n\tconst formatter = new AsYouType(country, metadata)\r\n\t// Input partial national phone number.\r\n\tformatter.input(number)\r\n\t// Return the parsed partial national phone number.\r\n\tconst phoneNumber = formatter.getNumber()\r\n\treturn phoneNumber && phoneNumber.nationalNumber\r\n}\r\n\r\n/**\r\n * Checks if a partially entered E.164 phone number could belong to a country.\r\n * @param  {string} number\r\n * @param  {string} country\r\n * @return {boolean}\r\n */\r\nexport function couldNumberBelongToCountry(number, country, metadata) {\r\n\tconst intlPhoneNumberPrefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\tlet i = 0\r\n\twhile (i < number.length && i < intlPhoneNumberPrefix.length) {\r\n\t\tif (number[i] !== intlPhoneNumberPrefix[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n\r\n/**\r\n * Gets initial \"phone digits\" (including `+`, if using international format).\r\n * @return {string} [phoneDigits] Returns `undefined` if there should be no initial \"phone digits\".\r\n */\r\nexport function getInitialPhoneDigits({\r\n\tvalue,\r\n\tphoneNumber,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\tuseNationalFormat,\r\n\tmetadata\r\n}) {\r\n\t// If the `value` (E.164 phone number)\r\n\t// belongs to the currently selected country\r\n\t// and `useNationalFormat` is `true`\r\n\t// then convert `value` (E.164 phone number)\r\n\t// to a local phone number digits.\r\n\t// E.g. '+78005553535' -> '88005553535'.\r\n\tif ((international === false || useNationalFormat) && phoneNumber && phoneNumber.country) {\r\n\t\treturn generateNationalNumberDigits(phoneNumber)\r\n\t}\r\n\t// If `international` property is `true`,\r\n\t// meaning \"enforce international phone number format\",\r\n\t// then always show country calling code in the input field.\r\n\tif (!value && international && defaultCountry) {\r\n\t\treturn getInternationalPhoneNumberPrefix(defaultCountry, metadata)\r\n\t}\r\n\treturn value\r\n}\r\n\r\n// function doesIncompletePhoneNumberCorrespondToASingleCountry(value, metadata) {\r\n// \t// Create \"as you type\" formatter.\r\n// \tconst formatter = new AsYouType(undefined, metadata)\r\n// \t// Input partial national phone number.\r\n// \tformatter.input(value)\r\n// \t// Return the parsed partial national phone number.\r\n// \tconst phoneNumber = formatter.getNumber()\r\n// \tif (phoneNumber) {\r\n// \t\treturn phoneNumber.getPossibleCountries().length === 1\r\n// \t} else {\r\n// \t\treturn false\r\n// \t}\r\n// }"],"mappings":"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","ignoreList":[]}