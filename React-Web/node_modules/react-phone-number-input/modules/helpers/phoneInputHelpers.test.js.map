{"version":3,"file":"phoneInputHelpers.test.js","names":["getPreSelectedCountry","getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","e164","getCountryForPartialE164Number","onPhoneDigitsChange","getInitialPhoneDigits","getCountryFromPossiblyIncompleteInternationalPhoneNumber","compareStrings","stripCountryCallingCode","getNationalSignificantNumberDigits","couldNumberBelongToCountry","trimNumber","metadata","describe","it","value","phoneNumber","countries","getAnyCountry","required","should","equal","expect","to","be","undefined","defaultCountry","country","phone","defaultLabels","countryNames","deep","label","_objectSpread","addInternationalOption","ZZ","a","b","nationalNumber","prevCountry","newCountry","useNationalFormat","prevPhoneDigits","latestCountrySelectedByUser","countryRequired","international","phoneDigits","limitMaxLength","countryCallingCodeEditable","onChange","rest","number"],"sources":["../../source/helpers/phoneInputHelpers.test.js"],"sourcesContent":["import {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\te164,\r\n\tgetCountryForPartialE164Number,\r\n\tonPhoneDigitsChange,\r\n\tgetInitialPhoneDigits,\r\n\t// Private functions\r\n\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber,\r\n\tcompareStrings,\r\n\tstripCountryCallingCode,\r\n\tgetNationalSignificantNumberDigits,\r\n\tcouldNumberBelongToCountry,\r\n\ttrimNumber\r\n} from './phoneInputHelpers.js'\r\n\r\nimport metadata from 'libphonenumber-js/min/metadata'\r\n\r\ndescribe('phoneInputHelpers', () => {\r\n\tit('should get pre-selected country', () => {\r\n\t\t// Can't return \"International\". Return the first country available.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can't be derived from the phone number.\r\n\t\t// Has `defaultCountry`.\r\n\t\t// Has `value`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+11111111111',\r\n\t\t\tphoneNumber: {},\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tcountries: ['RU', 'FR'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// Can return \"International\".\r\n\t\t// Country can be derived from the phone number.\r\n\t\t// Has `defaultCountry`.\r\n\t\t// Has a valid partial `value`.\r\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+7800',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tcountries: ['RU', 'FR'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.equal('RU')\r\n\r\n\t\t// Derive country from the phone number.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Country derived from the phone number overrides the supplied one.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Only pre-select a country if it's in the available `countries` list.\r\n\t\tgetPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\tgetAnyCountry: () => 'US',\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('US')\r\n\r\n\t\texpect(getPreSelectedCountry({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tcountries: ['US', 'DE'],\r\n\t\t\trequired: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should generate country select options', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia' }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// Should substitute missing country names with country codes.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': undefined }\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'RU'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (without custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'International'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\r\n\t\t// With \"International\" (with custom country names).\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia', ZZ: 'Intl' },\r\n\t\t\taddInternationalOption: true\r\n\t\t}).should.deep.equal([{\r\n\t\t\tlabel: 'Intl'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia'\r\n\t\t}, {\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}])\r\n\t})\r\n\r\n\tit('should generate country select options (custom `compareStrings`)', () => {\r\n\t\tconst defaultLabels = {\r\n\t\t\t'RU': 'Russia (Россия)',\r\n\t\t\t'US': 'United States',\r\n\t\t\t'ZZ': 'International'\r\n\t\t}\r\n\r\n\t\t// Without custom country names.\r\n\t\tgetCountrySelectOptions({\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tcountryNames: defaultLabels,\r\n\t\t\t// Reverse order.\r\n\t\t\tcompareStrings: (a, b) => a < b ? 1 : (a > b ? -1 : 0)\r\n\t\t}).should.deep.equal([{\r\n\t\t\tvalue: 'US',\r\n\t\t\tlabel: 'United States'\r\n\t\t}, {\r\n\t\t\tvalue: 'RU',\r\n\t\t\tlabel: 'Russia (Россия)'\r\n\t\t}])\r\n\t})\r\n\r\n\t// it('should generate country select options (Chinese locale)', () => {\r\n\t// \t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/20\r\n\t//\r\n\t// \tconst defaultLabels = {\r\n\t// \t\t'RU': 'Russia (Россия)',\r\n\t// \t\t'US': 'United States',\r\n\t// \t\t'ZZ': 'International'\r\n\t// \t}\r\n\t//\r\n\t// \t// Without custom country names.\r\n\t// \tgetCountrySelectOptions({\r\n\t// \t\tcountries: ['US', 'RU'],\r\n\t// \t\tcountryNames: defaultLabels,\r\n\t// \t\tcompareStringsLocales: 'zh-CN-u-co-pinyin'\r\n\t// \t}).should.deep.equal([{\r\n\t// \t\tvalue: 'US',\r\n\t// \t\tlabel: 'United States'\r\n\t// \t}, {\r\n\t// \t\tvalue: 'RU',\r\n\t// \t\tlabel: 'Russia (Россия)'\r\n\t// \t}])\r\n\t// })\r\n\r\n\tit('should parse phone numbers', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tphoneNumber.country.should.equal('RU')\r\n\t\tphoneNumber.nationalNumber.should.equal('8005553535')\r\n\r\n\t\t// No `value` passed.\r\n\t\texpect(parsePhoneNumber(null, metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should generate national number digits', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+33509758351', metadata)\r\n\t\tgenerateNationalNumberDigits(phoneNumber).should.equal('0509758351')\r\n\t})\r\n\r\n\tit('should migrate parsed input for new country', () => {\r\n\t\t// Country didn't change. Return the same digits.\r\n\t\tgetPhoneDigitsForNewCountry('', {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Country didn't change. Return the same digits.\r\n\t\tgetPhoneDigitsForNewCountry('123', {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('123')\r\n\r\n\t\t// Country didn't change. Return the same digits.\r\n\t\tgetPhoneDigitsForNewCountry('+123', {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+123')\r\n\r\n\t\t// No input. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Switching from \"International\" to a country\r\n\t\t// to which the phone number already belongs to.\r\n\t\t// No changes. Returns `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching between countries. National number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('8005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code not matches. Resets parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching from \"International\" to a country. Calling code matches. Doesn't reset parsed input.\r\n\t\tgetPhoneDigitsForNewCountry('+12223333333', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+12223333333')\r\n\r\n\t\t// Switching countries. International number. Calling code doesn't match.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. Calling code matches.\r\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+18005553535')\r\n\r\n\t\t// Switching countries. International number.\r\n\t\t// Country calling code is longer than the amount of digits available.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching countries. International number. No such country code.\r\n\t\tgetPhoneDigitsForNewCountry('+99', {\r\n\t\t\tprevCountry: 'KG',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Switching to \"International\". National number.\r\n\t\tgetPhoneDigitsForNewCountry('8800555', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7800555')\r\n\r\n\t\t// Switching to \"International\". No national (significant) number digits entered.\r\n\t\tgetPhoneDigitsForNewCountry('8', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t// }).should.equal('')\r\n\t\t}).should.equal('+7')\r\n\r\n\t\t// Switching to \"International\". International number. No changes.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tprevCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\t// Prefer national format. Country matches. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('8005553535')\r\n\r\n\t\t// Prefer national format. Country doesn't match, but country calling code does. Leaves the \"national (significant) number\".\r\n\t\tgetPhoneDigitsForNewCountry('+12133734253', {\r\n\t\t\tnewCountry: 'CA',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('2133734253')\r\n\r\n\t\t// Prefer national format. Country doesn't match, neither does country calling code. Clears the value.\r\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: true\r\n\t\t}).should.equal('')\r\n\r\n\t\t// Force international format. `phoneDigits` is empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry(null, {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata,\r\n\t\t\tuseNationalFormat: false\r\n\t\t}).should.equal('+1')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with the same calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with another calling code.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tprevCountry: 'CA',\r\n\t\t\tnewCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\t// Force international format. `phoneDigits` is not empty. From no country to a country.\r\n\t\tgetPhoneDigitsForNewCountry('+1222', {\r\n\t\t\tnewCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+1222')\r\n\r\n\t\t// `newCountry` is `undefined`.\r\n\t\t// `phoneDigits` are `undefined`.\r\n\t\t// `useNationalFormat` is `undefined`.\r\n\t\tgetPhoneDigitsForNewCountry(undefined, {\r\n\t\t\tprevCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('')\r\n\t})\r\n\r\n\tit('should format phone number in e164', () =>\r\n\t{\r\n\t\t// No number.\r\n\t\texpect(e164()).to.be.undefined\r\n\r\n\t\t// International number. Just a '+' sign.\r\n\t\texpect(e164('+')).to.be.undefined\r\n\r\n\t\t// International number.\r\n\t\te164('+7800', null, metadata).should.equal('+7800')\r\n\r\n\t\t// National number. Without country.\r\n\t\texpect(e164('8800', null, metadata)).to.be.undefined\r\n\r\n\t\t// National number. With country. Just national prefix.\r\n\t\t// expect(e164('8', 'RU', metadata)).to.be.undefined\r\n\t\te164('8', 'RU', metadata).should.equal('+7')\r\n\r\n\t\t// National number. With country.\r\n\t\te164('8800', 'RU', metadata).should.equal('+7800')\r\n\t})\r\n\r\n\tit('should trim the phone number if it exceeds the maximum length', () =>\r\n\t{\r\n\t\t// // No number.\r\n\t\t// expect(trimNumber()).to.be.undefined\r\n\r\n\t\t// Empty number.\r\n\t\texpect(trimNumber('', 'RU', metadata)).to.equal('')\r\n\r\n\t\t// // International number. Without country.\r\n\t\t// trimNumber('+780055535351').should.equal('+780055535351')\r\n\r\n\t\t// // National number. Without country.\r\n\t\t// trimNumber('880055535351', null).should.equal('880055535351')\r\n\r\n\t\t// National number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('2135553535', 'US', metadata).should.equal('2135553535')\r\n\t\t// National number. Exceeds the maximum length.\r\n\t\ttrimNumber('21355535351', 'US', metadata).should.equal('2135553535')\r\n\r\n\t\t// International number. Doesn't exceed the maximum length.\r\n\t\ttrimNumber('+12135553535', 'US', metadata).should.equal('+12135553535')\r\n\t\t// International number. Exceeds the maximum length.\r\n\t\ttrimNumber('+121355535351', 'US', metadata).should.equal('+12135553535')\r\n\t})\r\n\r\n\tit('should get country when inputting a national phone number for +1 calling code (`defaultCountry`)', () =>\r\n\t{\r\n\t\t// Issue:\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/228#note_1888308944\r\n\r\n\t\t// Starts inputting a phone number for default country `US`,\r\n\t\t// but then input value becomes `3107385` which is considered valid for `CA` country,\r\n\t\t// as per Google's metadata.\r\n\t\tonPhoneDigitsChange('3107385', {\r\n\t\t\tprevPhoneDigits: '310738',\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tlatestCountrySelectedByUser: undefined,\r\n\t\t\tcountryRequired: false,\r\n\t\t\tgetAnyCountry: () => 'RU',\r\n\t\t\tinternational: undefined,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '3107385',\r\n\t\t\tcountry: 'CA',\r\n\t\t\tvalue: '+13107385'\r\n\t\t})\r\n\r\n\t\t// Continues inputting the phone number  for default country `US`,\r\n\t\t// and the input value becomes `31073850` which is no longer considered valid for `CA` country,\r\n\t\t// so it should switch the country back to `US`.\r\n\t\tonPhoneDigitsChange('31073850', {\r\n\t\t\tprevPhoneDigits: '3107385',\r\n\t\t\tcountry: 'CA',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tlatestCountrySelectedByUser: undefined,\r\n\t\t\tcountryRequired: false,\r\n\t\t\tgetAnyCountry: () => 'RU',\r\n\t\t\tinternational: undefined,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '31073850',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+131073850'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should get country when inputting a national phone number for +1 calling code (`latestCountrySelectedByUser`)', () =>\r\n\t{\r\n\t\t// Issue:\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/228#note_1888308944\r\n\r\n\t\t// Starts inputting a phone number for default country `US`,\r\n\t\t// but then input value becomes `3107385` which is considered valid for `CA` country,\r\n\t\t// as per Google's metadata.\r\n\t\tonPhoneDigitsChange('3107385', {\r\n\t\t\tprevPhoneDigits: '310738',\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: undefined,\r\n\t\t\tlatestCountrySelectedByUser: 'US',\r\n\t\t\tcountryRequired: false,\r\n\t\t\tgetAnyCountry: () => 'RU',\r\n\t\t\tinternational: undefined,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '3107385',\r\n\t\t\tcountry: 'CA',\r\n\t\t\tvalue: '+13107385'\r\n\t\t})\r\n\r\n\t\t// Continues inputting the phone number  for default country `US`,\r\n\t\t// and the input value becomes `31073850` which is no longer considered valid for `CA` country,\r\n\t\t// so it should switch the country back to `US`.\r\n\t\tonPhoneDigitsChange('31073850', {\r\n\t\t\tprevPhoneDigits: '3107385',\r\n\t\t\tcountry: 'CA',\r\n\t\t\tdefaultCountry: undefined,\r\n\t\t\tlatestCountrySelectedByUser: 'US',\r\n\t\t\tcountryRequired: false,\r\n\t\t\tgetAnyCountry: () => 'RU',\r\n\t\t\tinternational: undefined,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '31073850',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+131073850'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should get country for partial E.164 number', () =>\r\n\t{\r\n\t\t// Just a '+' sign.\r\n\t\t// Early return.\r\n\t\tgetCountryForPartialE164Number('+', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// Just a '+' sign.\r\n\t\t// Early return.\r\n\t\texpect(getCountryForPartialE164Number('+', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can be derived.\r\n\t\tgetCountryForPartialE164Number('+78005553535', {\r\n\t\t\tcountries: ['US', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can be derived.\r\n\t\t// But that country is not allowed.\r\n\t\texpect(getCountryForPartialE164Number('+78005553535', {\r\n\t\t\tcountries: ['US'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is not ambiguous.\r\n\t\tgetCountryForPartialE164Number('+33', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// But some country is required to be selected.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And the user has manually selected that country.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tlatestCountrySelectedByUser: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And the user has manually selected some country\r\n\t\t// but that country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tlatestCountrySelectedByUser: 'FR',\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// But the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And the country is a default one.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.equal('RU')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country does fit the number.\r\n\t\t// And the country is ambiguous.\r\n\t\t// And there is some default country\r\n\t\t// but that country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tcountries: ['RU'],\r\n\t\t\tdefaultCountry: 'FR',\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\texpect(getCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\t// Bit \"International\" option is not available\r\n\t\t// so some country is required to be selected.\r\n\t\tgetCountryForPartialE164Number('+7', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'RU'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\r\n\t\t// A country can't be derived yet.\r\n\t\t// And the currently selected country doesn't fit the number.\r\n\t\t// Bit \"International\" option is not available\r\n\t\t// so some country is required to be selected.\r\n\t\tgetCountryForPartialE164Number('+12', {\r\n\t\t\tcountry: 'FR',\r\n\t\t\tcountries: ['FR', 'US'],\r\n\t\t\trequired: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('FR')\r\n\t})\r\n\r\n\tit('should get country from possibly incomplete international phone number', () =>\r\n\t{\r\n\t\t// // `001` country calling code.\r\n\t\t// // Non-geographic numbering plan.\r\n\t\t// expect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+800', metadata)).to.be.undefined\r\n\r\n\t\t// Country can be derived.\r\n\t\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber('+33', metadata).should.equal('FR')\r\n\r\n\t\t// Country can't be derived yet.\r\n\t\texpect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+12', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should compare strings', () =>\r\n\t{\r\n\t\tcompareStrings('aa', 'ab').should.equal(-1)\r\n\t\tcompareStrings('aa', 'aa').should.equal(0)\r\n\t\tcompareStrings('aac', 'aab').should.equal(1)\r\n\t})\r\n\r\n\tit('should strip country calling code from a number', () =>\r\n\t{\r\n\t\t// Number is longer than country calling code prefix.\r\n\t\tstripCountryCallingCode('+7800', 'RU', metadata).should.equal('800')\r\n\r\n\t\t// Number is shorter than (or equal to) country calling code prefix.\r\n\t\tstripCountryCallingCode('+3', 'FR', metadata).should.equal('')\r\n\t\tstripCountryCallingCode('+7', 'FR', metadata).should.equal('')\r\n\r\n\t\t// `country` doesn't fit the actual `number`.\r\n\t\t// Iterates through all available country calling codes.\r\n\t\tstripCountryCallingCode('+7800', 'FR', metadata).should.equal('800')\r\n\r\n\t\t// No `country`.\r\n\t\t// And the calling code doesn't belong to any country.\r\n\t\tstripCountryCallingCode('+999', null, metadata).should.equal('')\r\n\t})\r\n\r\n\tit('should get national significant number part', () =>\r\n\t{\r\n\t\t// International number.\r\n\t\tgetNationalSignificantNumberDigits('+7800555', null, metadata).should.equal('800555')\r\n\r\n\t\t// International number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('+', null, metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('+7', null, metadata)).to.be.undefined\r\n\r\n\t\t// National number.\r\n\t\tgetNationalSignificantNumberDigits('8800555', 'RU', metadata).should.equal('800555')\r\n\r\n\t\t// National number.\r\n\t\t// No national (significant) number digits.\r\n\t\texpect(getNationalSignificantNumberDigits('8', 'RU', metadata)).to.be.undefined\r\n\t\texpect(getNationalSignificantNumberDigits('', 'RU', metadata)).to.be.undefined\r\n\t})\r\n\r\n\tit('should determine of a number could belong to a country', () =>\r\n\t{\r\n\t\t// Matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'RU', metadata).should.equal(true)\r\n\r\n\t\t// First digit already not matching.\r\n\t\tcouldNumberBelongToCountry('+7800', 'FR', metadata).should.equal(false)\r\n\r\n\t\t// First digit matching, second - not matching.\r\n\t\tcouldNumberBelongToCountry('+33', 'AM', metadata).should.equal(false)\r\n\r\n\t\t// Number is shorter than country calling code.\r\n\t\tcouldNumberBelongToCountry('+99', 'KG', metadata).should.equal(true)\r\n\t})\r\n\r\n\tit('should handle phone digits change (should choose new \"value\" based on phone digits)', () => {\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tmetadata,\r\n\t\t\tcountryRequired: true,\r\n\t\t\tgetAnyCountry: () => 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+78', {\r\n\t\t\tmetadata,\r\n\t\t\tcountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change', () => {\r\n\t\t// Doesn't really support passing an `undefined` value.\r\n\t\t// I dunno why doesn't it throw an error here.\r\n\t\t// Anyway, since this test already existed, I didn't remove it.\r\n\t\tonPhoneDigitsChange(undefined, {\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: undefined,\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+1213', {\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// Will reset an automatically selected country when it's ambiguous.\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// Won't reset a default selected country when it's ambiguous.\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// Won't reset a manually selected country when it's ambiguous.\r\n\t\tonPhoneDigitsChange('213', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlatestCountrySelectedByUser: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '213',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+1213'\r\n\t\t})\r\n\r\n\t\t// When inputting a valid number for another country\r\n\t\t// it should switch to that other country.\r\n\t\tonPhoneDigitsChange('+78005553535', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Won't reset an already selected default country when it is ambiguous.\r\n\t\t// Full number entered.\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Won't reset an already manually selected country when it is ambiguous.\r\n\t\t// Full number entered.\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlatestCountrySelectedByUser: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Will reset an automatically selected country when it is ambiguous.\r\n\t\t// Full number entered.\r\n\t\tonPhoneDigitsChange('+15555555555', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+15555555555',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+15555555555'\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input,\r\n\t\t// and the user decides to erase all input,\r\n\t\t// and the country neither was selected manually by either not it is a default one.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input,\r\n\t\t// and the user decides to erase all input,\r\n\t\t// and the country neither was selected manually by either not it is a default one.\r\n\t\t// Should reset the country to the default one.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should reset the country if it has likely been automatically\r\n\t\t// selected based on international phone number input\r\n\t\t// and the user decides to erase all input up to the `+` sign.\r\n\t\tonPhoneDigitsChange('+', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (limitMaxLength: true)', () => {\r\n\t\tonPhoneDigitsChange('21337342530',{\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '2133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tcountry: 'US',\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+12133734253',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+12133734253'\r\n\t\t})\r\n\r\n\t\t// This case is intentionally ignored to simplify the code.\r\n\t\tonPhoneDigitsChange('+121337342530', {\r\n\t\t\tlimitMaxLength: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\t// phoneDigits: '+12133734253',\r\n\t\t\t// country: 'US',\r\n\t\t\t// value: '+12133734253'\r\n\t\t\tphoneDigits: '+121337342530',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+121337342530'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true`)', () => {\r\n\t\t// Shouldn't set `country` to `defaultCountry`\r\n\t\t// when erasing parsed input starting with a `+`\r\n\t\t// when `international` is `true`.\r\n\t\tonPhoneDigitsChange('', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tdefaultCountry: 'US',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Should support forcing international phone number input format.\r\n\t\tonPhoneDigitsChange('2', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+2',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+2'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (reset incompatible international input)', () => {\r\n\t\t// With `country`.\r\n\t\tonPhoneDigitsChange('+1', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// Without `country`.\r\n\t\t// Not possible because passing `countryCallingCodeEditable: false` flag\r\n\t\t// automatically means that some country calling code is specified\r\n\t\t// meaning that there is a `country`.\r\n\t\t// Still, test coverage requires the \"else path\" to be covered.\r\n\t\tonPhoneDigitsChange('+1', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: undefined,\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+1',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+1'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (append national input)', () => {\r\n\t\tonPhoneDigitsChange('8', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+78',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (compatible input)', () => {\r\n\t\tonPhoneDigitsChange('+7', {\r\n\t\t\tprevPhoneDigits: '+78005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tcountryCallingCodeEditable: false,\r\n\t\t\tmetadata\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false`)', () => {\r\n\t\tconst onChange = (phoneDigits, prevPhoneDigits, country, rest) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\t...rest,\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\t// Reset an automatically selected country.\r\n\t\tonChange('+78', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: undefined,\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\t// Won't reset a manually selected country.\r\n\t\tonChange('+78', '', 'RU', {\r\n\t\t\tlatestCountrySelectedByUser: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\t// Won't reset an automatically selected default country.\r\n\t\tonChange('+78', '', 'RU', {\r\n\t\t\tdefaultCountry: 'RU'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\t// Reset an automatically selected country.\r\n\t\tonChange('+121', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\t// Won't reset a manually selected country.\r\n\t\tonChange('+121', '', 'US', {\r\n\t\t\tlatestCountrySelectedByUser: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\t// Won't reset an automatically selected default country.\r\n\t\tonChange('+121', '', 'US', {\r\n\t\t\tdefaultCountry: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '21',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+121'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\tonChange('+78005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\t// Reset an automatically selected country.\r\n\t\tonChange('+78005553535', '', 'US').should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\t// Won't reset a manually selected country.\r\n\t\tonChange('+78005553535', '', 'US', {\r\n\t\t\tlatestCountrySelectedByUser: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Another country: just trims the `+`.\r\n\t\t// Won't reset an automatically selected default country.\r\n\t\tonChange('+78005553535', '', 'US', {\r\n\t\t\tdefaultCountry: 'US'\r\n\t\t}).should.deep.equal({\r\n\t\t\tphoneDigits: '78005553535',\r\n\t\t\tcountry: 'US',\r\n\t\t\tvalue: '+178005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in national format.\r\n\t\tonChange('88005553535', '8800555353', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\r\n\t\t// Empty `phoneDigits`.\r\n\t\tonChange('', '88005553535', 'RU').should.deep.equal({\r\n\t\t\tphoneDigits: '',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\t})\r\n\r\n\tit('should handle phone digits change (`international: false` and no country selected)', () => {\r\n\t\t// If `international` is `false` then it means that\r\n\t\t// \"International\" option should not be available,\r\n\t\t// so it doesn't handle the cases when it is available.\r\n\r\n\t\tconst onChange = (phoneDigits) => onPhoneDigitsChange(phoneDigits, {\r\n\t\t\tprevPhoneDigits: '',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// No country calling code.\r\n\t\tonChange('+').should.deep.equal({\r\n\t\t\tphoneDigits: '+',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: undefined\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Just country calling code.\r\n\t\tonChange('+7').should.deep.equal({\r\n\t\t\tphoneDigits: '+7',\r\n\t\t\tcountry: undefined,\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first digit.\r\n\t\t// (which is assumed a \"national prefix\").\r\n\t\tonChange('+78').should.deep.equal({\r\n\t\t\tphoneDigits: '8',\r\n\t\t\tcountry: 'RU',\r\n\t\t\t// value: undefined\r\n\t\t\tvalue: '+7'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Country calling code and first two digits.\r\n\t\tonChange('+3311').should.deep.equal({\r\n\t\t\tphoneDigits: '11',\r\n\t\t\tcountry: 'FR',\r\n\t\t\tvalue: '+3311'\r\n\t\t})\r\n\r\n\t\t// `phoneDigits` in international format.\r\n\t\t// Full number.\r\n\t\tonChange('+78005553535').should.deep.equal({\r\n\t\t\tphoneDigits: '88005553535',\r\n\t\t\tcountry: 'RU',\r\n\t\t\tvalue: '+78005553535'\r\n\t\t})\r\n\t})\r\n\r\n\tit('should get initial parsed input', () => {\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: '+78005553535',\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+78005553535')\r\n\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: true,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+7')\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\r\n\t\texpect(getInitialPhoneDigits({\r\n\t\t\tvalue: undefined,\r\n\t\t\tinternational: false,\r\n\t\t\tmetadata\r\n\t\t})).to.be.undefined\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('88005553535')\r\n\t})\r\n\r\n\tit('should get initial parsed input (has `phoneNumber` that has no `country`)', () => {\r\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632', metadata)\r\n\t\tgetInitialPhoneDigits({\r\n\t\t\tvalue: phoneNumber.number,\r\n\t\t\tdefaultCountry: 'RU',\r\n\t\t\tuseNationalFormat: true,\r\n\t\t\tphoneNumber,\r\n\t\t\tmetadata\r\n\t\t}).should.equal('+870773111632')\r\n\t})\r\n})"],"mappings":";;;;;;AAAA,SACCA,qBAAqB,EACrBC,uBAAuB,EACvBC,gBAAgB,EAChBC,4BAA4B,EAC5BC,2BAA2B,EAC3BC,IAAI,EACJC,8BAA8B,EAC9BC,mBAAmB,EACnBC,qBAAqB;AACrB;AACAC,wDAAwD,EACxDC,cAAc,EACdC,uBAAuB,EACvBC,kCAAkC,EAClCC,0BAA0B,EAC1BC,UAAU,QACJ,wBAAwB;AAE/B,OAAOC,QAAQ,MAAM,gCAAgC;AAErDC,QAAQ,CAAC,mBAAmB,EAAE,YAAM;EACnCC,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC3C;IACAjB,qBAAqB,CAAC;MACrBkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE,CAAC,CAAC;MACfC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBC,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzBC,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACA;IACAC,MAAM,CAACzB,qBAAqB,CAAC;MAC5BkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE,CAAC,CAAC;MACfC,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBC,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzBC,QAAQ,EAAE,KAAK;MACfP,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACA;IACA;IACA;IACAH,MAAM,CAACzB,qBAAqB,CAAC;MAC5BkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE,CAAC,CAAC;MACfU,cAAc,EAAE,IAAI;MACpBT,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBE,QAAQ,EAAE,KAAK;MACfP,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACA;IACA;IACA;IACAH,MAAM,CAACzB,qBAAqB,CAAC;MAC5BkB,KAAK,EAAE,OAAO;MACdW,cAAc,EAAE,IAAI;MACpBT,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBE,QAAQ,EAAE,KAAK;MACfP,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACF,KAAK,CAAC,IAAI,CAAC;;IAElB;IACAxB,qBAAqB,CAAC;MACrBkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE;QAAEW,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAa,CAAC;MACnDX,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBC,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzBC,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACAxB,qBAAqB,CAAC;MACrBkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE;QAAEW,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAa,CAAC;MACnDF,cAAc,EAAE,IAAI;MACpBT,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBE,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACAxB,qBAAqB,CAAC;MACrBkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE;QAAEW,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAa,CAAC;MACnDX,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBC,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzBC,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;IAErBC,MAAM,CAACzB,qBAAqB,CAAC;MAC5BkB,KAAK,EAAE,cAAc;MACrBC,WAAW,EAAE;QAAEW,OAAO,EAAE,IAAI;QAAEC,KAAK,EAAE;MAAa,CAAC;MACnDF,cAAc,EAAE,IAAI;MACpBT,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBE,QAAQ,EAAE,KAAK;MACfP,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;EACpB,CAAC,CAAC;EAEFX,EAAE,CAAC,wCAAwC,EAAE,YAAM;IAClD,IAAMe,aAAa,GAAG;MACrB,IAAI,EAAE,iBAAiB;MACvB,IAAI,EAAE,eAAe;MACrB,IAAI,EAAE;IACP,CAAC;;IAED;IACA/B,uBAAuB,CAAC;MACvBmB,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBa,YAAY,EAAED;IACf,CAAC,CAAC,CAACT,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC,CAAC;MACrBN,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,CAAC,CAAC;;IAEH;IACAlC,uBAAuB,CAAC;MACvBmB,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBa,YAAY,EAAAG,aAAA,CAAAA,aAAA,KAAOJ,aAAa;QAAE,IAAI,EAAE;MAAQ;IACjD,CAAC,CAAC,CAACT,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC,CAAC;MACrBN,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,CAAC,CAAC;;IAEH;IACAlC,uBAAuB,CAAC;MACvBmB,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBa,YAAY,EAAAG,aAAA,CAAAA,aAAA,KAAOJ,aAAa;QAAE,IAAI,EAAEJ;MAAS;IAClD,CAAC,CAAC,CAACL,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC,CAAC;MACrBN,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,CAAC,CAAC;;IAEH;IACAlC,uBAAuB,CAAC;MACvBmB,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBa,YAAY,EAAED,aAAa;MAC3BK,sBAAsB,EAAE;IACzB,CAAC,CAAC,CAACd,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC,CAAC;MACrBW,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,CAAC,CAAC;;IAEH;IACAlC,uBAAuB,CAAC;MACvBmB,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBa,YAAY,EAAAG,aAAA,CAAAA,aAAA,KAAOJ,aAAa;QAAE,IAAI,EAAE,QAAQ;QAAEM,EAAE,EAAE;MAAM,EAAE;MAC9DD,sBAAsB,EAAE;IACzB,CAAC,CAAC,CAACd,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC,CAAC;MACrBW,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEFlB,EAAE,CAAC,kEAAkE,EAAE,YAAM;IAC5E,IAAMe,aAAa,GAAG;MACrB,IAAI,EAAE,iBAAiB;MACvB,IAAI,EAAE,eAAe;MACrB,IAAI,EAAE;IACP,CAAC;;IAED;IACA/B,uBAAuB,CAAC;MACvBmB,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBa,YAAY,EAAED,aAAa;MAC3B;MACAtB,cAAc,EAAE,SAAAA,eAAC6B,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,GAAGC,CAAC,GAAG,CAAC,GAAID,CAAC,GAAGC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAE;MAAA;IACvD,CAAC,CAAC,CAACjB,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC,CAAC;MACrBN,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,EAAE;MACFjB,KAAK,EAAE,IAAI;MACXiB,KAAK,EAAE;IACR,CAAC,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAlB,EAAE,CAAC,4BAA4B,EAAE,YAAM;IACtC,IAAME,WAAW,GAAGjB,gBAAgB,CAAC,cAAc,EAAEa,QAAQ,CAAC;IAC9DI,WAAW,CAACW,OAAO,CAACP,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;IACtCL,WAAW,CAACsB,cAAc,CAAClB,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;;IAErD;IACAC,MAAM,CAACvB,gBAAgB,CAAC,IAAI,EAAEa,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;EACzD,CAAC,CAAC;EAEFX,EAAE,CAAC,wCAAwC,EAAE,YAAM;IAClD,IAAME,WAAW,GAAGjB,gBAAgB,CAAC,cAAc,EAAEa,QAAQ,CAAC;IAC9DZ,4BAA4B,CAACgB,WAAW,CAAC,CAACI,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;EACrE,CAAC,CAAC;EAEFP,EAAE,CAAC,6CAA6C,EAAE,YAAM;IACvD;IACAb,2BAA2B,CAAC,EAAE,EAAE;MAC/BsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;;IAEnB;IACApB,2BAA2B,CAAC,KAAK,EAAE;MAClCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;;IAEtB;IACApB,2BAA2B,CAAC,MAAM,EAAE;MACnCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,MAAM,CAAC;;IAEvB;IACApB,2BAA2B,CAAC,EAAE,EAAE;MAC/BsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;;IAEnB;IACA;IACA;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;;IAE/B;IACApB,2BAA2B,CAAC,YAAY,EAAE;MACzCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;;IAE7B;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;;IAE/B;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;;IAE/B;IACA;IACApB,2BAA2B,CAAC,KAAK,EAAE;MAClCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,KAAK,EAAE;MAClCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,SAAS,EAAE;MACtCsC,WAAW,EAAE,IAAI;MACjB3B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,UAAU,CAAC;;IAE3B;IACApB,2BAA2B,CAAC,GAAG,EAAE;MAChCsC,WAAW,EAAE,IAAI;MACjB3B,QAAQ,EAARA;MACD;IACA,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CsC,WAAW,EAAE,IAAI;MACjB3B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;;IAE/B;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;;IAE7B;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;;IAE7B;IACApB,2BAA2B,CAAC,cAAc,EAAE;MAC3CuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;;IAEnB;IACApB,2BAA2B,CAAC,IAAI,EAAE;MACjCuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA,QAAQ;MACR6B,iBAAiB,EAAE;IACpB,CAAC,CAAC,CAACrB,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,OAAO,EAAE;MACpCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,OAAO,CAAC;;IAExB;IACApB,2BAA2B,CAAC,OAAO,EAAE;MACpCsC,WAAW,EAAE,IAAI;MACjBC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACApB,2BAA2B,CAAC,OAAO,EAAE;MACpCuC,UAAU,EAAE,IAAI;MAChB5B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,OAAO,CAAC;;IAExB;IACA;IACA;IACApB,2BAA2B,CAACwB,SAAS,EAAE;MACtCc,WAAW,EAAE,IAAI;MACjB3B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;EACpB,CAAC,CAAC;EAEFP,EAAE,CAAC,oCAAoC,EAAE,YACzC;IACC;IACAQ,MAAM,CAACpB,IAAI,CAAC,CAAC,CAAC,CAACqB,EAAE,CAACC,EAAE,CAACC,SAAS;;IAE9B;IACAH,MAAM,CAACpB,IAAI,CAAC,GAAG,CAAC,CAAC,CAACqB,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEjC;IACAvB,IAAI,CAAC,OAAO,EAAE,IAAI,EAAEU,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,OAAO,CAAC;;IAEnD;IACAC,MAAM,CAACpB,IAAI,CAAC,MAAM,EAAE,IAAI,EAAEU,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEpD;IACA;IACAvB,IAAI,CAAC,GAAG,EAAE,IAAI,EAAEU,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAE5C;IACAnB,IAAI,CAAC,MAAM,EAAE,IAAI,EAAEU,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,OAAO,CAAC;EACnD,CAAC,CAAC;EAEFP,EAAE,CAAC,+DAA+D,EAAE,YACpE;IACC;IACA;;IAEA;IACAQ,MAAM,CAACX,UAAU,CAAC,EAAE,EAAE,IAAI,EAAEC,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACF,KAAK,CAAC,EAAE,CAAC;;IAEnD;IACA;;IAEA;IACA;;IAEA;IACAV,UAAU,CAAC,YAAY,EAAE,IAAI,EAAEC,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;IACnE;IACAV,UAAU,CAAC,aAAa,EAAE,IAAI,EAAEC,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,YAAY,CAAC;;IAEpE;IACAV,UAAU,CAAC,cAAc,EAAE,IAAI,EAAEC,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;IACvE;IACAV,UAAU,CAAC,eAAe,EAAE,IAAI,EAAEC,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;EACzE,CAAC,CAAC;EAEFP,EAAE,CAAC,kGAAkG,EAAE,YACvG;IACC;IACA;;IAEA;IACA;IACA;IACAV,mBAAmB,CAAC,SAAS,EAAE;MAC9BsC,eAAe,EAAE,QAAQ;MACzBf,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBiB,2BAA2B,EAAElB,SAAS;MACtCmB,eAAe,EAAE,KAAK;MACtB1B,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzB2B,aAAa,EAAEpB,SAAS;MACxBb,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,SAAS;MACtBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAX,mBAAmB,CAAC,UAAU,EAAE;MAC/BsC,eAAe,EAAE,SAAS;MAC1Bf,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBiB,2BAA2B,EAAElB,SAAS;MACtCmB,eAAe,EAAE,KAAK;MACtB1B,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzB2B,aAAa,EAAEpB,SAAS;MACxBb,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,UAAU;MACvBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,+GAA+G,EAAE,YACpH;IACC;IACA;;IAEA;IACA;IACA;IACAV,mBAAmB,CAAC,SAAS,EAAE;MAC9BsC,eAAe,EAAE,QAAQ;MACzBf,OAAO,EAAE,IAAI;MACbD,cAAc,EAAED,SAAS;MACzBkB,2BAA2B,EAAE,IAAI;MACjCC,eAAe,EAAE,KAAK;MACtB1B,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzB2B,aAAa,EAAEpB,SAAS;MACxBb,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,SAAS;MACtBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAX,mBAAmB,CAAC,UAAU,EAAE;MAC/BsC,eAAe,EAAE,SAAS;MAC1Bf,OAAO,EAAE,IAAI;MACbD,cAAc,EAAED,SAAS;MACzBkB,2BAA2B,EAAE,IAAI;MACjCC,eAAe,EAAE,KAAK;MACtB1B,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;MACzB2B,aAAa,EAAEpB,SAAS;MACxBb,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,UAAU;MACvBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,6CAA6C,EAAE,YAClD;IACC;IACA;IACAX,8BAA8B,CAAC,GAAG,EAAE;MACnCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACAC,MAAM,CAACnB,8BAA8B,CAAC,GAAG,EAAE;MAC1Cc,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACAtB,8BAA8B,CAAC,cAAc,EAAE;MAC9Cc,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACAC,MAAM,CAACnB,8BAA8B,CAAC,cAAc,EAAE;MACrDc,SAAS,EAAE,CAAC,IAAI,CAAC;MACjBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACA;IACAtB,8BAA8B,CAAC,KAAK,EAAE;MACrCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACA;IACAC,MAAM,CAACnB,8BAA8B,CAAC,IAAI,EAAE;MAC3CwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,CAAC;MACjBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACA;IACA;IACAtB,8BAA8B,CAAC,IAAI,EAAE;MACpCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,CAAC;MACjBE,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACA;IACA;IACAlB,8BAA8B,CAAC,IAAI,EAAE;MACpCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,CAAC;MACjB0B,2BAA2B,EAAE,IAAI;MACjC/B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACA;IACA;IACA;IACAC,MAAM,CAACnB,8BAA8B,CAAC,IAAI,EAAE;MAC3CwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,CAAC;MACjB0B,2BAA2B,EAAE,IAAI;MACjC/B,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACA;IACA;IACAtB,8BAA8B,CAAC,IAAI,EAAE;MACpCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,CAAC;MACjBS,cAAc,EAAE,IAAI;MACpBd,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACA;IACA;IACA;IACAC,MAAM,CAACnB,8BAA8B,CAAC,IAAI,EAAE;MAC3CwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,CAAC;MACjBS,cAAc,EAAE,IAAI;MACpBd,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACAH,MAAM,CAACnB,8BAA8B,CAAC,IAAI,EAAE;MAC3CwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACAH,MAAM,CAACnB,8BAA8B,CAAC,KAAK,EAAE;MAC5CwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBL,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEnB;IACA;IACA;IACA;IACAtB,8BAA8B,CAAC,IAAI,EAAE;MACpCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBE,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAErB;IACA;IACA;IACA;IACAlB,8BAA8B,CAAC,KAAK,EAAE;MACrCwB,OAAO,EAAE,IAAI;MACbV,SAAS,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC;MACvBE,QAAQ,EAAE,IAAI;MACdP,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;EACtB,CAAC,CAAC;EAEFP,EAAE,CAAC,wEAAwE,EAAE,YAC7E;IACC;IACA;IACA;;IAEA;IACAR,wDAAwD,CAAC,KAAK,EAAEM,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAE5F;IACAC,MAAM,CAAChB,wDAAwD,CAAC,KAAK,EAAEM,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;EAClG,CAAC,CAAC;EAEFX,EAAE,CAAC,wBAAwB,EAAE,YAC7B;IACCP,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAACa,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC3Cd,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAACa,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAC1Cd,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAACa,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC;EAEFP,EAAE,CAAC,iDAAiD,EAAE,YACtD;IACC;IACAN,uBAAuB,CAAC,OAAO,EAAE,IAAI,EAAEI,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;;IAEpE;IACAb,uBAAuB,CAAC,IAAI,EAAE,IAAI,EAAEI,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;IAC9Db,uBAAuB,CAAC,IAAI,EAAE,IAAI,EAAEI,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;;IAE9D;IACA;IACAb,uBAAuB,CAAC,OAAO,EAAE,IAAI,EAAEI,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;;IAEpE;IACA;IACAb,uBAAuB,CAAC,MAAM,EAAE,IAAI,EAAEI,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,EAAE,CAAC;EACjE,CAAC,CAAC;EAEFP,EAAE,CAAC,6CAA6C,EAAE,YAClD;IACC;IACAL,kCAAkC,CAAC,UAAU,EAAE,IAAI,EAAEG,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,QAAQ,CAAC;;IAErF;IACA;IACAC,MAAM,CAACb,kCAAkC,CAAC,GAAG,EAAE,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;IAC/EH,MAAM,CAACb,kCAAkC,CAAC,IAAI,EAAE,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;;IAEhF;IACAhB,kCAAkC,CAAC,SAAS,EAAE,IAAI,EAAEG,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,QAAQ,CAAC;;IAEpF;IACA;IACAC,MAAM,CAACb,kCAAkC,CAAC,GAAG,EAAE,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;IAC/EH,MAAM,CAACb,kCAAkC,CAAC,EAAE,EAAE,IAAI,EAAEG,QAAQ,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;EAC/E,CAAC,CAAC;EAEFX,EAAE,CAAC,wDAAwD,EAAE,YAC7D;IACC;IACAJ,0BAA0B,CAAC,OAAO,EAAE,IAAI,EAAEE,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;;IAEtE;IACAX,0BAA0B,CAAC,OAAO,EAAE,IAAI,EAAEE,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;;IAEvE;IACAX,0BAA0B,CAAC,KAAK,EAAE,IAAI,EAAEE,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,KAAK,CAAC;;IAErE;IACAX,0BAA0B,CAAC,KAAK,EAAE,IAAI,EAAEE,QAAQ,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;EACrE,CAAC,CAAC;EAEFP,EAAE,CAAC,qFAAqF,EAAE,YAAM;IAC/FV,mBAAmB,CAAC,GAAG,EAAE;MACxBQ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAEU;IACR,CAAC,CAAC;IAEFrB,mBAAmB,CAAC,GAAG,EAAE;MACxBQ,QAAQ,EAARA,QAAQ;MACRgC,eAAe,EAAE,IAAI;MACrB1B,aAAa,EAAE,SAAAA,cAAA;QAAA,OAAM,IAAI;MAAA;IAC1B,CAAC,CAAC,CAACE,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;IAEFrB,mBAAmB,CAAC,IAAI,EAAE;MACzBQ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;IAEFX,mBAAmB,CAAC,IAAI,EAAE;MACzBQ,QAAQ,EAARA,QAAQ;MACRe,OAAO,EAAE;IACV,CAAC,CAAC,CAACP,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;IAEFrB,mBAAmB,CAAC,KAAK,EAAE;MAC1BQ,QAAQ,EAARA,QAAQ;MACRe,OAAO,EAAE;IACV,CAAC,CAAC,CAACP,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,KAAK;MAClBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,mCAAmC,EAAE,YAAM;IAC7C;IACA;IACA;IACAV,mBAAmB,CAACqB,SAAS,EAAE;MAC9BE,OAAO,EAAE,IAAI;MACbf,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAErB,SAAS;MACtBE,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;IAEFrB,mBAAmB,CAAC,EAAE,EAAE;MACvBQ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,EAAE;MACfnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAEU;IACR,CAAC,CAAC;IAEFrB,mBAAmB,CAAC,MAAM,EAAE;MAC3BQ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,OAAO;MACpBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;IAEFX,mBAAmB,CAAC,OAAO,EAAE;MAC5BQ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,OAAO;MACpBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAX,mBAAmB,CAAC,KAAK,EAAE;MAC1BuB,OAAO,EAAE,IAAI;MACbf,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,KAAK;MAClBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAX,mBAAmB,CAAC,KAAK,EAAE;MAC1BuB,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBd,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,KAAK;MAClBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAX,mBAAmB,CAAC,KAAK,EAAE;MAC1BuB,OAAO,EAAE,IAAI;MACbgB,2BAA2B,EAAE,IAAI;MACjC/B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,KAAK;MAClBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACAX,mBAAmB,CAAC,cAAc,EAAE;MACnCuB,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBd,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,cAAc;MAC3BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACAX,mBAAmB,CAAC,cAAc,EAAE;MACnCuB,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBd,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,cAAc;MAC3BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACAX,mBAAmB,CAAC,cAAc,EAAE;MACnCuB,OAAO,EAAE,IAAI;MACbgB,2BAA2B,EAAE,IAAI;MACjC/B,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,cAAc;MAC3BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACAX,mBAAmB,CAAC,cAAc,EAAE;MACnCuB,OAAO,EAAE,IAAI;MACbf,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,cAAc;MAC3BnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACAX,mBAAmB,CAAC,EAAE,EAAE;MACvBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbf,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,EAAE;MACfnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAEU;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACArB,mBAAmB,CAAC,EAAE,EAAE;MACvBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBd,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,EAAE;MACfnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACArB,mBAAmB,CAAC,GAAG,EAAE;MACxBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbf,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAEU;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,0DAA0D,EAAE,YAAM;IACpEV,mBAAmB,CAAC,aAAa,EAAC;MACjCuB,OAAO,EAAE,IAAI;MACboB,cAAc,EAAE,IAAI;MACpBnC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,YAAY;MACzBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;IAEFX,mBAAmB,CAAC,eAAe,EAAE;MACpCuB,OAAO,EAAE,IAAI;MACboB,cAAc,EAAE,IAAI;MACpBnC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,cAAc;MAC3BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAX,mBAAmB,CAAC,eAAe,EAAE;MACpC2C,cAAc,EAAE,IAAI;MACpBnC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpB;MACA;MACA;MACAyB,WAAW,EAAE,eAAe;MAC5BnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,2DAA2D,EAAE,YAAM;IACrE;IACA;IACA;IACAV,mBAAmB,CAAC,EAAE,EAAE;MACvBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbD,cAAc,EAAE,IAAI;MACpBmB,aAAa,EAAE,IAAI;MACnBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,EAAE;MACfnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAEU;IACR,CAAC,CAAC;;IAEF;IACArB,mBAAmB,CAAC,GAAG,EAAE;MACxBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbkB,aAAa,EAAE,IAAI;MACnBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,4IAA4I,EAAE,YAAM;IACtJ;IACAV,mBAAmB,CAAC,IAAI,EAAE;MACzBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbkB,aAAa,EAAE,IAAI;MACnBG,0BAA0B,EAAE,KAAK;MACjCpC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACArB,mBAAmB,CAAC,IAAI,EAAE;MACzBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAEF,SAAS;MAClBoB,aAAa,EAAE,IAAI;MACnBG,0BAA0B,EAAE,KAAK;MACjCpC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,2HAA2H,EAAE,YAAM;IACrIV,mBAAmB,CAAC,GAAG,EAAE;MACxBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbkB,aAAa,EAAE,IAAI;MACnBG,0BAA0B,EAAE,KAAK;MACjCpC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,KAAK;MAClBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,sHAAsH,EAAE,YAAM;IAChIV,mBAAmB,CAAC,IAAI,EAAE;MACzBsC,eAAe,EAAE,cAAc;MAC/Bf,OAAO,EAAE,IAAI;MACbkB,aAAa,EAAE,IAAI;MACnBG,0BAA0B,EAAE,KAAK;MACjCpC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,4DAA4D,EAAE,YAAM;IACtE,IAAMmC,QAAQ,GAAG,SAAXA,QAAQA,CAAIH,WAAW,EAAEJ,eAAe,EAAEf,OAAO,EAAEuB,IAAI;MAAA,OAAK9C,mBAAmB,CAAC0C,WAAW,EAAAb,aAAA,CAAAA,aAAA,KAC7FiB,IAAI;QACPR,eAAe,EAAfA,eAAe;QACff,OAAO,EAAPA,OAAO;QACPkB,aAAa,EAAE,KAAK;QACpBjC,QAAQ,EAARA;MAAQ,EACR,CAAC;IAAA;;IAEF;IACA;IACAqC,QAAQ,CAAC,IAAI,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAC1CyB,WAAW,EAAE,EAAE;MACfnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACAwB,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAC3CyB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAEF,SAAS;MAClB;MACAV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACAkC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE;MACzBN,2BAA2B,EAAE;IAC9B,CAAC,CAAC,CAACvB,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAE,IAAI;MACb;MACAZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACAkC,QAAQ,CAAC,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE;MACzBvB,cAAc,EAAE;IACjB,CAAC,CAAC,CAACN,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAE,IAAI;MACb;MACAZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAC5CyB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE;MAC1BN,2BAA2B,EAAE;IAC9B,CAAC,CAAC,CAACvB,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,MAAM,EAAE,EAAE,EAAE,IAAI,EAAE;MAC1BvB,cAAc,EAAE;IACjB,CAAC,CAAC,CAACN,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAkC,QAAQ,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpDyB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpDyB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,EAAE;MAClCN,2BAA2B,EAAE;IAC9B,CAAC,CAAC,CAACvB,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,cAAc,EAAE,EAAE,EAAE,IAAI,EAAE;MAClCvB,cAAc,EAAE;IACjB,CAAC,CAAC,CAACN,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACpByB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAkC,QAAQ,CAAC,aAAa,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACnDyB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAkC,QAAQ,CAAC,aAAa,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAC7DyB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACAkC,QAAQ,CAAC,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACnDyB,WAAW,EAAE,EAAE;MACfnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAEU;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFX,EAAE,CAAC,oFAAoF,EAAE,YAAM;IAC9F;IACA;IACA;;IAEA,IAAMmC,QAAQ,GAAG,SAAXA,QAAQA,CAAIH,WAAW;MAAA,OAAK1C,mBAAmB,CAAC0C,WAAW,EAAE;QAClEJ,eAAe,EAAE,EAAE;QACnBG,aAAa,EAAE,KAAK;QACpBjC,QAAQ,EAARA;MACD,CAAC,CAAC;IAAA;;IAEF;IACA;IACAqC,QAAQ,CAAC,GAAG,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAC/ByB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAEU;IACR,CAAC,CAAC;;IAEF;IACA;IACAwB,QAAQ,CAAC,IAAI,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAChCyB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAEF,SAAS;MAClBV,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACA;IACAkC,QAAQ,CAAC,KAAK,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACjCyB,WAAW,EAAE,GAAG;MAChBnB,OAAO,EAAE,IAAI;MACb;MACAZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACAkC,QAAQ,CAAC,OAAO,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MACnCyB,WAAW,EAAE,IAAI;MACjBnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;;IAEF;IACA;IACAkC,QAAQ,CAAC,cAAc,CAAC,CAAC7B,MAAM,CAACW,IAAI,CAACV,KAAK,CAAC;MAC1CyB,WAAW,EAAE,aAAa;MAC1BnB,OAAO,EAAE,IAAI;MACbZ,KAAK,EAAE;IACR,CAAC,CAAC;EACH,CAAC,CAAC;EAEFD,EAAE,CAAC,iCAAiC,EAAE,YAAM;IAC3CT,qBAAqB,CAAC;MACrBU,KAAK,EAAE,cAAc;MACrBW,cAAc,EAAE,IAAI;MACpBmB,aAAa,EAAE,KAAK;MACpBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;IAE/BhB,qBAAqB,CAAC;MACrBU,KAAK,EAAE,cAAc;MACrBW,cAAc,EAAE,IAAI;MACpBmB,aAAa,EAAE,IAAI;MACnBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,cAAc,CAAC;IAE/BhB,qBAAqB,CAAC;MACrBU,KAAK,EAAEU,SAAS;MAChBC,cAAc,EAAE,IAAI;MACpBmB,aAAa,EAAE,IAAI;MACnBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,IAAI,CAAC;IAErBC,MAAM,CAACjB,qBAAqB,CAAC;MAC5BU,KAAK,EAAEU,SAAS;MAChBC,cAAc,EAAE,IAAI;MACpBmB,aAAa,EAAE,KAAK;MACpBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;IAEnBH,MAAM,CAACjB,qBAAqB,CAAC;MAC5BU,KAAK,EAAEU,SAAS;MAChBoB,aAAa,EAAE,KAAK;MACpBjC,QAAQ,EAARA;IACD,CAAC,CAAC,CAAC,CAACW,EAAE,CAACC,EAAE,CAACC,SAAS;EACpB,CAAC,CAAC;EAEFX,EAAE,CAAC,wEAAwE,EAAE,YAAM;IAClF,IAAME,WAAW,GAAGjB,gBAAgB,CAAC,cAAc,EAAEa,QAAQ,CAAC;IAC9DP,qBAAqB,CAAC;MACrBU,KAAK,EAAEC,WAAW,CAACmC,MAAM;MACzBzB,cAAc,EAAE,IAAI;MACpBe,iBAAiB,EAAE,IAAI;MACvBzB,WAAW,EAAXA,WAAW;MACXJ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,aAAa,CAAC;EAC/B,CAAC,CAAC;EAEFP,EAAE,CAAC,2EAA2E,EAAE,YAAM;IACrF,IAAME,WAAW,GAAGjB,gBAAgB,CAAC,eAAe,EAAEa,QAAQ,CAAC;IAC/DP,qBAAqB,CAAC;MACrBU,KAAK,EAAEC,WAAW,CAACmC,MAAM;MACzBzB,cAAc,EAAE,IAAI;MACpBe,iBAAiB,EAAE,IAAI;MACvBzB,WAAW,EAAXA,WAAW;MACXJ,QAAQ,EAARA;IACD,CAAC,CAAC,CAACQ,MAAM,CAACC,KAAK,CAAC,eAAe,CAAC;EACjC,CAAC,CAAC;AACH,CAAC,CAAC","ignoreList":[]}