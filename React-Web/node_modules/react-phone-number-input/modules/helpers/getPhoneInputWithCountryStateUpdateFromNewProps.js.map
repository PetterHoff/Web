{"version":3,"file":"getPhoneInputWithCountryStateUpdateFromNewProps.js","names":["getInitialPhoneDigits","getCountryForPartialE164Number","parsePhoneNumber","couldNumberBelongToCountry","getInternationalPhoneNumberPrefix","isCountrySupportedWithError","getSupportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","props","prevProps","state","metadata","countries","newDefaultCountry","defaultCountry","newValue","value","newReset","reset","international","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevValue","prevReset","country","hasUserSelectedACountry","latestCountrySelectedByUser","_getInitialPhoneDigits","parameters","_objectSpread","useNationalFormat","phoneDigits","undefined","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","valuesAreEqual","phoneNumber","parsedCountry","supportedCountries","indexOf","userCountrySelectionHistoryStateUpdate","couldNewValueCorrespondToLatestCountrySelectedByUser","value1","value2"],"sources":["../../source/helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js"],"sourcesContent":["import {\r\n\tgetInitialPhoneDigits,\r\n\tgetCountryForPartialE164Number,\r\n\tparsePhoneNumber,\r\n\tcouldNumberBelongToCountry\r\n} from './phoneInputHelpers.js'\r\n\r\nimport getInternationalPhoneNumberPrefix from './getInternationalPhoneNumberPrefix.js'\r\n\r\nimport {\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries\r\n} from './countries.js'\r\n\r\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\r\n\tconst {\r\n\t\tmetadata,\r\n\t\tcountries,\r\n\t\tdefaultCountry: newDefaultCountry,\r\n\t\tvalue: newValue,\r\n\t\treset: newReset,\r\n\t\tinternational,\r\n\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t// superceded by `initialValueFormat` property.\r\n\t\tdisplayInitialValueAsLocalNumber,\r\n\t\tinitialValueFormat\r\n\t} = props\r\n\r\n\tconst {\r\n\t\tdefaultCountry: prevDefaultCountry,\r\n\t\tvalue: prevValue,\r\n\t\treset: prevReset\r\n\t} = prevProps\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tvalue,\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\t\thasUserSelectedACountry,\r\n\t\tlatestCountrySelectedByUser\r\n\t} = state\r\n\r\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\r\n\t\t...parameters,\r\n\t\tinternational,\r\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\tmetadata\r\n\t})\r\n\r\n\t// Some users requested a way to reset the component\r\n\t// (both number `<input/>` and country `<select/>`).\r\n\t// Whenever `reset` property changes both number `<input/>`\r\n\t// and country `<select/>` are reset.\r\n\t// It's not implemented as some instance `.reset()` method\r\n\t// because `ref` is forwarded to `<input/>`.\r\n\t// It's also not replaced with just resetting `country` on\r\n\t// external `value` reset, because a user could select a country\r\n\t// and then not input any `value`, and so the selected country\r\n\t// would be \"stuck\", if not using this `reset` property.\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\tif (newReset !== prevReset) {\r\n\t\treturn {\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: undefined,\r\n\t\t\tcountry: newDefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser: undefined,\r\n\t\t\thasUserSelectedACountry: undefined\r\n\t\t}\r\n\t}\r\n\r\n\t// `value` is the value currently shown in the component:\r\n\t// it's stored in the component's `state`, and it's not the `value` property.\r\n\t// `prevValue` is \"previous `value` property\".\r\n\t// `newValue` is \"new `value` property\".\r\n\r\n\t// If the default country changed\r\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\r\n\t// then select it, but only if the user hasn't already manually\r\n\t// selected a country, and no phone number has been manually entered so far.\r\n\t// Because if the user has already started inputting a phone number\r\n\t// then they're okay with no country being selected at all (\"International\")\r\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\r\n\tif (newDefaultCountry !== prevDefaultCountry) {\r\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\r\n\t\tconst noValueHasBeenEnteredByTheUser = (\r\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\r\n\t\t\t!value ||\r\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\r\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\r\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\r\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\r\n\t\t\t(international && value === _getInitialPhoneDigits({\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdefaultCountry: prevDefaultCountry\r\n\t\t\t}))\r\n\t\t)\r\n\t\t// Only update the `defaultCountry` property if no phone number\r\n\t\t// has been entered by the user or pre-set by the application.\r\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\r\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\r\n\t\t\treturn {\r\n\t\t\t\tcountry: newDefaultCountry,\r\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\r\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\r\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\r\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\r\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\r\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\t\tvalue: undefined,\r\n\t\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t\t}),\r\n\t\t\t\t// `value` is `undefined` and it stays so.\r\n\t\t\t\tvalue: undefined\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// If a new `value` is set externally.\r\n\t// (e.g. as a result of an ajax API request\r\n\t//  to get user's phone after page loaded)\r\n\t// The first part — `newValue !== prevValue` —\r\n\t// is basically `props.value !== prevProps.value`\r\n\t// so it means \"if value property was changed externally\".\r\n\t// The second part — `newValue !== value` —\r\n\t// is for ignoring the `getDerivedStateFromProps()` call\r\n\t// which happens in `this.onChange()` right after `this.setState()`.\r\n\t// If this `getDerivedStateFromProps()` call isn't ignored\r\n\t// then the country flag would reset on each input.\r\n\tif (!valuesAreEqual(newValue, prevValue) && !valuesAreEqual(newValue, value)) {\r\n\t\tlet phoneNumber\r\n\t\tlet parsedCountry\r\n\t\tif (newValue) {\r\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\r\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\r\n\t\t\tif (phoneNumber && phoneNumber.country) {\r\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\r\n\t\t\t\t/* istanbul ignore next */\r\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\r\n\t\t\t\t\tparsedCountry = phoneNumber.country\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\r\n\t\t\t\t\tcountry: undefined,\r\n\t\t\t\t\tcountries: supportedCountries,\r\n\t\t\t\t\tmetadata\r\n\t\t\t\t})\r\n\r\n\t\t\t\t// In cases when multiple countries correspond to the same country calling code,\r\n\t\t\t\t// the phone number digits of `newValue` have to be matched against country-specific\r\n\t\t\t\t// regular expressions in order to determine the exact country.\r\n\t\t\t\t// Sometimes, that algorithm can't decide for sure which country does the phone number belong to,\r\n\t\t\t\t// for example when the digits of `newValue` don't match any of those regular expressions.\r\n\t\t\t\t// and the country of the phone number couldn't be determined.\r\n\t\t\t\t// In those cases, people prefer the component to show the flag of the `defaultCountry`\r\n\t\t\t\t// if the phone number could potentially belong to that `defaultCountry`.\r\n\t\t\t\t// At least that's how the component behaves when a user pastes an international\r\n\t\t\t\t// phone number into the input field: for example, when `defaultCountry` is `\"US\"`\r\n\t\t\t\t// and the user pastes value \"+1 555 555 5555\" into the input field, it keep showing \"US\" flag.\r\n\t\t\t\t// So when setting new `value` property externally, the component should behave the same way:\r\n\t\t\t\t// it should select the `defaultCountry` when the new `value` could potentially belong\r\n\t\t\t\t// to that country in cases when the exact country can't be determined.\r\n\t\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/413#issuecomment-1536219404\r\n\t\t\t\tif (!parsedCountry) {\r\n\t\t\t\t\tif (newDefaultCountry) {\r\n\t\t\t\t\t\tif (newValue.indexOf(getInternationalPhoneNumberPrefix(newDefaultCountry, metadata)) === 0) {\r\n\t\t\t\t\t\t\tparsedCountry = newDefaultCountry\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet userCountrySelectionHistoryStateUpdate\r\n\t\tif (newValue) {\r\n\t\t\t// If the latest country that has been manually selected by the user\r\n\t\t\t// no longer corresponds to the new value then reset it.\r\n\t\t\tif (latestCountrySelectedByUser) {\r\n\t\t\t\tconst couldNewValueCorrespondToLatestCountrySelectedByUser =\r\n\t\t\t\t\tparsedCountry\r\n\t\t\t\t\t\t? latestCountrySelectedByUser === parsedCountry\r\n\t\t\t\t\t\t: couldNumberBelongToCountry(newValue, latestCountrySelectedByUser, metadata)\r\n\r\n\t\t\t\tif (couldNewValueCorrespondToLatestCountrySelectedByUser) {\r\n\t\t\t\t\tif (!parsedCountry) {\r\n\t\t\t\t\t\tparsedCountry = latestCountrySelectedByUser\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tuserCountrySelectionHistoryStateUpdate = {\r\n\t\t\t\t\t\tlatestCountrySelectedByUser: undefined\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// When the `value` property is being reset \"externally\",\r\n\t\t\t// reset any tracking of the country that the user has previously selected.\r\n\t\t\tuserCountrySelectionHistoryStateUpdate = {\r\n\t\t\t\tlatestCountrySelectedByUser: undefined,\r\n\t\t\t\thasUserSelectedACountry: undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn {\r\n\t\t\t...userCountrySelectionHistoryStateUpdate,\r\n\t\t\tphoneDigits: _getInitialPhoneDigits({\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tvalue: newValue,\r\n\t\t\t\tdefaultCountry: newDefaultCountry\r\n\t\t\t}),\r\n\t\t\tvalue: newValue,\r\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\r\n\t\t}\r\n\t}\r\n\r\n\t// `defaultCountry` didn't change.\r\n\t// `value` didn't change.\r\n\t// `phoneDigits` didn't change, because `value` didn't change.\r\n\t//\r\n\t// So no need to update state.\r\n}\r\n\r\nexport function valuesAreEqual(value1, value2) {\r\n\t// If `value` has been set to `null` externally then convert it to `undefined`.\r\n\t//\r\n\t// For example, `react-hook-form` sets `value` to `null` when the user clears the input.\r\n\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/164\r\n\t// In that case, without this conversion of `null` to `undefined`, it would reset\r\n\t// the selected country to `defaultCountry` because in that case `newValue !== value`\r\n\t// because `null !== undefined`.\r\n\t//\r\n\t// Historically, empty `value` is encoded as `undefined`.\r\n\t// Perhaps empty `value` would be better encoded as `null` instead.\r\n\t// But because that would be a potentially breaking change for some people,\r\n\t// it's left as is for the current \"major\" version of this library.\r\n\t//\r\n\tif (value1 === null) {\r\n\t\tvalue1 = undefined\r\n\t}\r\n\tif (value2 === null) {\r\n\t\tvalue2 = undefined\r\n\t}\r\n\treturn value1 === value2\r\n}"],"mappings":"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","ignoreList":[]}