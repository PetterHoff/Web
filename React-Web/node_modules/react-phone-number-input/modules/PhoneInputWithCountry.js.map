{"version":3,"file":"PhoneInputWithCountry.js","names":["React","PropTypes","classNames","InputSmart","InputBasic","CountrySelectWithIcon","CountrySelect","Flag","InternationalIcon","sortCountryOptions","isCountrySupportedWithError","getSupportedCountries","getSupportedCountryOptions","getCountries","createCountryIconComponent","setRefsValue","metadata","metadataPropType","labels","labelsPropType","getPreSelectedCountry","getCountrySelectOptions","couldNumberBelongToCountry","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPhoneInputWithCountryStateUpdateFromNewProps","PhoneNumberInput_","_React$PureComponent","props","_this","_classCallCheck","_callSuper","_defineProperty","instance","inputRef","country","newCountry","_this$props","international","onChange","focusInputOnCountrySelection","_this$state","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","useNationalFormat","newValue","current","focus","setState","latestCountrySelectedByUser","hasUserSelectedACountry","value","_phoneDigits","_this$props2","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","countries","currentlySelectedCountry","_onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","undefined","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","createRef","_this$props3","displayInitialValueAsLocalNumber","initialValueFormat","_this$props4","phoneNumber","CountryIcon","preSelectedCountry","required","_inherits","_createClass","key","componentDidMount","onCountryChange","selectedCountry","componentDidUpdate","prevProps","prevState","_ref","_this$props5","countryOptionsOrder","locales","useMemoCountrySelectOptions","countryNames","compareStringsLocales","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","_ref2","countryOptions","render","_this$props6","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","containerComponentProps","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","_objectWithoutProperties","_excluded","_this$state3","InputComponent","countrySelectOptions","createElement","_extends","concat","options","onCountryFocus","onCountryBlur","iconComponent","ref","setInputRef","type","withCountryCallingCode","getDerivedStateFromProps","_objectSpread","PureComponent","PhoneNumberInput","forwardRef","withDefaultProps","propTypes","string","func","isRequired","bool","oneOf","arrayOf","oneOfType","objectOf","elementType","object","defaultProps","any","a","b","length","i"],"sources":["../source/PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport { setRefsValue } from './useExternalRef.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tcouldNumberBelongToCountry,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\t// This function mimicks `refSetter` function returned from `useExternalRef()` hook\r\n\t// because this class-like React component can't use the `useExternalRef()` hook.\r\n\tsetInputRef = (instance) => {\r\n\t\tsetRefsValue([this.props.inputRef, this.inputRef], instance)\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\tlatestCountrySelectedByUser: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tlatestCountrySelectedByUser\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t\t// `prevPhoneDigits` parameter to the same `onPhoneDigitsChange()` function\r\n\t\t\t// on next input change event.\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tlatestCountrySelectedByUser,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\t// Reset `latestCountrySelectedByUser` if it no longer fits the `value`.\r\n\t\tif (latestCountrySelectedByUser && value && !couldNumberBelongToCountry(value, latestCountrySelectedByUser, metadata)) {\r\n\t\t\tstateUpdate.latestCountrySelectedByUser = undefined\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\t\t\tcontainerComponentProps,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}\r\n\t\t\t\t{...containerComponentProps}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tinternational={international ? true : undefined}\r\n\t\t\t\t\twithCountryCallingCode={international ? true : undefined}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...withDefaultProps(props)} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component props.\r\n\t */\r\n\tcontainerComponentProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool\r\n}\r\n\r\nconst defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nfunction withDefaultProps(props) {\r\n\tprops = { ...props }\r\n\r\n\tfor (const key in defaultProps) {\r\n\t\tif (props[key] === undefined) {\r\n\t\t\tprops[key] = defaultProps[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn props\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n"],"mappings":"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;IAAEM,QAAQ,EAAE+G;EAAI,EAAC,CAAC;AAAA,CAChE,CAAC;AAEFO,gBAAgB,CAACG,SAAS,GAAG;EAC5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrG,KAAK,EAAEzD,SAAS,CAAC+J,MAAM;EAEvB;AACD;AACA;AACA;AACA;AACA;AACA;EACCrH,QAAQ,EAAE1C,SAAS,CAACgK,IAAI,CAACC,UAAU;EAEnC;AACD;AACA;AACA;EACCpF,OAAO,EAAE7E,SAAS,CAACgK,IAAI;EAEvB;AACD;AACA;AACA;EACClF,MAAM,EAAE9E,SAAS,CAACgK,IAAI;EAEtB;AACD;AACA;AACA;EACC5C,QAAQ,EAAEpH,SAAS,CAACkK,IAAI;EAExB;AACD;AACA;AACA;EACC7C,QAAQ,EAAErH,SAAS,CAACkK,IAAI;EAExB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA5C,YAAY,EAAEtH,SAAS,CAAC+J,MAAM;EAE9B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA3E,kBAAkB,EAAEpF,SAAS,CAACmK,KAAK,CAAC,CAAC,UAAU,CAAC,CAAC;EAEjD;EACA;EACAhF,gCAAgC,EAAEnF,SAAS,CAACkK,IAAI;EAEhD;AACD;AACA;AACA;AACA;AACA;EACC;EACAtG,cAAc,EAAE5D,SAAS,CAAC+J,MAAM;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;EACC9F,SAAS,EAAEjE,SAAS,CAACoK,OAAO,CAACpK,SAAS,CAAC+J,MAAM,CAAC;EAE9C;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC9I,MAAM,EAAEC,cAAc;EAEtB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCoF,OAAO,EAAEtG,SAAS,CAACqK,SAAS,CAAC,CAC5BrK,SAAS,CAAC+J,MAAM,EAChB/J,SAAS,CAACoK,OAAO,CAACpK,SAAS,CAAC+J,MAAM,CAAC,CACnC,CAAC;EAEF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC3B,OAAO,EAAEpI,SAAS,CAAC+J,MAAM;EAEzB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC7B,KAAK,EAAElI,SAAS,CAACsK,QAAQ,CAACtK,SAAS,CAACuK,WAAW,CAAC;EAEhD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCpC,aAAa,EAAEnI,SAAS,CAACuK,WAAW;EAEpC;AACD;AACA;EACC1G,sBAAsB,EAAE7D,SAAS,CAACkK,IAAI;EAEtC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC7B,iBAAiB,EAAErI,SAAS,CAACuK,WAAW;EAExC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClE,mBAAmB,EAAErG,SAAS,CAACoK,OAAO,CAACpK,SAAS,CAAC+J,MAAM,CAAC;EAExD;AACD;AACA;EACCxC,KAAK,EAAEvH,SAAS,CAACwK,MAAM;EAEvB;AACD;AACA;EACChD,SAAS,EAAExH,SAAS,CAAC+J,MAAM;EAE3B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClC,sBAAsB,EAAE7H,SAAS,CAACuK,WAAW;EAE7C;AACD;AACA;AACA;AACA;EACCvF,kBAAkB,EAAEhF,SAAS,CAACwK,MAAM;EAEpC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC/C,cAAc,EAAEzH,SAAS,CAACuK,WAAW;EAErC;AACD;AACA;EACC7C,gBAAgB,EAAE1H,SAAS,CAACwK,MAAM;EAElC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCzC,kBAAkB,EAAE/H,SAAS,CAACuK,WAAW;EAEzC;AACD;AACA;EACCvC,uBAAuB,EAAEhI,SAAS,CAACwK,MAAM;EAEzC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA7C,UAAU,EAAE3H,SAAS,CAACkK,IAAI;EAE1B;AACD;AACA;AACA;AACA;EACCzH,aAAa,EAAEzC,SAAS,CAACkK,IAAI;EAE7B;AACD;AACA;AACA;EACCpG,cAAc,EAAE9D,SAAS,CAACkK,IAAI;EAE9B;AACD;AACA;AACA;AACA;EACCnG,0BAA0B,EAAE/D,SAAS,CAACkK,IAAI;EAE1C;AACD;AACA;AACA;AACA;AACA;EACCnJ,QAAQ,EAAEC,gBAAgB;EAE1B;AACD;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA8E,eAAe,EAAE9F,SAAS,CAACgK,IAAI;EAE/B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCrH,4BAA4B,EAAE3C,SAAS,CAACkK;AACzC,CAAC;AAED,IAAMO,YAAY,GAAG;EACpB;AACD;AACA;EACCnD,YAAY,EAAE,KAAK;EAEnB;AACD;AACA;EACCO,sBAAsB,EAAExH,aAAa;EAErC;AACD;AACA;EACC8H,aAAa,EAAE7H,IAAI;EAEnB;AACD;AACA;EACC;EACA8H,OAAO,EAAE,sEAAsE;EAE/E;AACD;AACA;EACCC,iBAAiB,EAAE9H,iBAAiB;EAEpC;AACD;AACA;EACCkH,cAAc,EAAE,OAAO;EAEvB;AACD;AACA;EACCM,kBAAkB,EAAE,KAAK;EAEzB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAO,KAAK,EAAEtI,SAAS,CAAC0K,GAAG;EAEpB;AACD;AACA;;EAEC;AACD;AACA;EACC/C,UAAU,EAAE,IAAI;EAEhB;AACD;AACA;AACA;EACC9D,sBAAsB,EAAE,IAAI;EAE5B;AACD;AACA;AACA;AACA;EACCE,0BAA0B,EAAE,IAAI;EAEhC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCpB,4BAA4B,EAAE;AAC/B,CAAC;AAED,SAASkH,gBAAgBA,CAAC9H,KAAK,EAAE;EAChCA,KAAK,GAAA0H,aAAA,KAAQ1H,KAAK,CAAE;EAEpB,KAAK,IAAM6D,GAAG,IAAI6E,YAAY,EAAE;IAC/B,IAAI1I,KAAK,CAAC6D,GAAG,CAAC,KAAKpB,SAAS,EAAE;MAC7BzC,KAAK,CAAC6D,GAAG,CAAC,GAAG6E,YAAY,CAAC7E,GAAG,CAAC;IAC/B;EACD;EAEA,OAAO7D,KAAK;AACb;AAEA,eAAe4H,gBAAgB;AAE/B,SAAS9C,cAAcA,CAAC8D,CAAC,EAAEC,CAAC,EAAE;EAC7B,IAAID,CAAC,CAACE,MAAM,KAAKD,CAAC,CAACC,MAAM,EAAE;IAC1B,OAAO,KAAK;EACb;EACA,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOA,CAAC,GAAGH,CAAC,CAACE,MAAM,EAAE;IACpB,IAAIF,CAAC,CAACG,CAAC,CAAC,KAAKF,CAAC,CAACE,CAAC,CAAC,EAAE;MAClB,OAAO,KAAK;IACb;IACAA,CAAC,EAAE;EACJ;EACA,OAAO,IAAI;AACZ","ignoreList":[]}