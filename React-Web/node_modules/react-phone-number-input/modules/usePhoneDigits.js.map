{"version":3,"file":"usePhoneDigits.js","names":["useRef","useState","useCallback","useEffect","AsYouType","getCountryCallingCode","parseDigits","getInternationalPhoneNumberPrefix","usePhoneDigits","_ref","_this","value","onChange","country","defaultCountry","international","withCountryCallingCode","useNationalFormatForDefaultCountryValue","metadata","countryMismatchDetected","onCountryMismatch","actualCountry","console","error","concat","current","getInitialPhoneDigits","options","getPhoneDigitsForValue","_len","arguments","length","args","Array","_key","apply","_useState","_useState2","_slicedToArray","prevCountry","setPrevCountry","_useState3","_useState4","prevDefaultCountry","setPrevDefaultCountry","_useState5","_useState6","phoneDigits","setPhoneDigits","_useState7","_useState8","valueForPhoneDigits","setValueForPhoneDigits","_useState9","_useState10","rerenderTrigger","setRerenderTrigger","rerender","getValueForPhoneDigits","asYouType","input","getNumberValue","onSetPhoneDigits","prefix","indexOf","undefined","slice","phoneNumber","getNumber","countryCallingCode","nationalNumber","formatNational"],"sources":["../source/usePhoneDigits.js"],"sourcesContent":["import { useRef, useState, useCallback, useEffect } from 'react'\r\nimport { AsYouType, getCountryCallingCode, parseDigits } from 'libphonenumber-js/core'\r\n\r\nimport getInternationalPhoneNumberPrefix from './helpers/getInternationalPhoneNumberPrefix.js'\r\n\r\n/**\r\n * Returns `[phoneDigits, setPhoneDigits]`.\r\n * \"Phone digits\" includes not only \"digits\" but also a `+` sign.\r\n */\r\nexport default function usePhoneDigits({\r\n\tvalue,\r\n\tonChange,\r\n\tcountry,\r\n\tdefaultCountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata\r\n}) {\r\n\tconst countryMismatchDetected = useRef()\r\n\tconst onCountryMismatch = (value, country, actualCountry) => {\r\n\t\tconsole.error(`[react-phone-number-input] Expected phone number ${value} to correspond to country ${country} but ${actualCountry ? 'in reality it corresponds to country ' + actualCountry : 'it doesn\\'t'}.`)\r\n\t\tcountryMismatchDetected.current = true\r\n\t}\r\n\r\n\tconst getInitialPhoneDigits = (options) => {\r\n\t\treturn getPhoneDigitsForValue(\r\n\t\t\tvalue,\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tdefaultCountry,\r\n\t\t\tuseNationalFormatForDefaultCountryValue,\r\n\t\t\tmetadata,\r\n\t\t\t(...args) => {\r\n\t\t\t\tif (options && options.onCountryMismatch) {\r\n\t\t\t\t\toptions.onCountryMismatch()\r\n\t\t\t\t}\r\n\t\t\t\tonCountryMismatch.apply(this, args)\r\n\t\t\t}\r\n\t\t)\r\n\t}\r\n\r\n\t// This is only used to detect `country` property change.\r\n\tconst [prevCountry, setPrevCountry] = useState(country)\r\n\t// This is only used to detect `defaultCountry` property change.\r\n\tconst [prevDefaultCountry, setPrevDefaultCountry] = useState(defaultCountry)\r\n\t// `phoneDigits` is the `value` passed to the `<input/>`.\r\n\tconst [phoneDigits, setPhoneDigits] = useState(getInitialPhoneDigits())\r\n\t// This is only used to detect `value` property changes.\r\n\tconst [valueForPhoneDigits, setValueForPhoneDigits] = useState(value)\r\n\r\n\t// Rerender hack.\r\n\tconst [rerenderTrigger, setRerenderTrigger] = useState()\r\n\tconst rerender = useCallback(() => setRerenderTrigger({}), [setRerenderTrigger])\r\n\r\n\tfunction getValueForPhoneDigits(phoneDigits) {\r\n\t\t// If the user hasn't input any digits then `value` is `undefined`.\r\n\t\tif (!phoneDigits) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tif (country && international && !withCountryCallingCode) {\r\n\t\t\tphoneDigits = `+${getCountryCallingCode(country, metadata)}${phoneDigits}`\r\n\t\t}\r\n\t\t// Return the E.164 phone number value.\r\n\t\t//\r\n\t\t// Even if no \"national (significant) number\" digits have been input,\r\n\t\t// still return a non-`undefined` value.\r\n\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/113\r\n\t\t//\r\n\t\t// For example, if the user has selected country `US` and entered `\"1\"`\r\n\t\t// then that `\"1\"` is just a \"national prefix\" and no \"national (significant) number\"\r\n\t\t// digits have been input yet. Still, return `\"+1\"` as `value` in such cases,\r\n\t\t// because otherwise the app would think that the input is empty and mark it as such\r\n\t\t// while in reality it isn't empty, which might be thought of as a \"bug\", or just\r\n\t\t// a \"weird\" behavior.\r\n\t\t//\r\n\t\t// The only case when there's any input and `getNumberValue()` still returns `undefined`\r\n\t\t// is when that input is `\"+\"`.\r\n\t\t//\r\n\t\tconst asYouType = new AsYouType(country || defaultCountry, metadata)\r\n\t\tasYouType.input(phoneDigits)\r\n\t\treturn asYouType.getNumberValue()\r\n\t}\r\n\r\n\t// If `value` property has been changed externally\r\n\t// then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (value !== valueForPhoneDigits) {\r\n\t\t\tsetValueForPhoneDigits(value)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [value])\r\n\r\n\t// If the `country` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (country !== prevCountry) {\r\n\t\t\tsetPrevCountry(country)\r\n\t\t\tlet countryMismatchDetected\r\n\t\t\tconst phoneDigits = getInitialPhoneDigits({\r\n\t\t\t\tonCountryMismatch() {\r\n\t\t\t\t\tcountryMismatchDetected = true\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tsetPhoneDigits(phoneDigits)\r\n\t\t\tif (countryMismatchDetected) {\r\n\t\t\t\tsetValueForPhoneDigits(getValueForPhoneDigits(phoneDigits))\r\n\t\t\t}\r\n\t\t}\r\n\t}, [country])\r\n\r\n\t// If the `defaultCountry` has been changed then re-initialize the component.\r\n\tuseEffect(() => {\r\n\t\tif (defaultCountry !== prevDefaultCountry) {\r\n\t\t\tsetPrevDefaultCountry(defaultCountry)\r\n\t\t\tsetPhoneDigits(getInitialPhoneDigits())\r\n\t\t}\r\n\t}, [defaultCountry])\r\n\r\n\t// Update the `value` after `valueForPhoneDigits` has been updated.\r\n\tuseEffect(() => {\r\n\t\tif (valueForPhoneDigits !== value) {\r\n\t\t\tonChange(valueForPhoneDigits)\r\n\t\t}\r\n\t}, [valueForPhoneDigits])\r\n\r\n\tconst onSetPhoneDigits = useCallback((phoneDigits) => {\r\n\t\tlet value\r\n\t\tif (country) {\r\n\t\t\tif (international && withCountryCallingCode) {\r\n\t\t\t\t// The `<input/>` value must start with the country calling code.\r\n\t\t\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\t\t\tif (phoneDigits.indexOf(prefix) !== 0) {\r\n\t\t\t\t\t// If a user tabs into a phone number input field\r\n\t\t\t\t\t// that is `international` and `withCountryCallingCode`,\r\n\t\t\t\t\t// and then starts inputting local phone number digits,\r\n\t\t\t\t\t// the first digit would get \"swallowed\" if the fix below wasn't implemented.\r\n\t\t\t\t\t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/43\r\n\t\t\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t\t\tphoneDigits = prefix + phoneDigits\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\t// // Reset phone digits if they don't start with the correct prefix.\r\n\t\t\t\t\t\t// // Undo the `<input/>` value change if it doesn't.\r\n\t\t\t\t\t\tif (countryMismatchDetected.current) {\r\n\t\t\t\t\t\t\t// In case of a `country`/`value` mismatch,\r\n\t\t\t\t\t\t\t// if it performed an \"undo\" here, then\r\n\t\t\t\t\t\t\t// it wouldn't let a user edit their phone number at all,\r\n\t\t\t\t\t\t\t// so this special case at least allows phone number editing\r\n\t\t\t\t\t\t\t// when `value` already doesn't match the `country`.\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// If it simply did `phoneDigits = prefix` here,\r\n\t\t\t\t\t\t\t// then it could have no effect when erasing phone number\r\n\t\t\t\t\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t\t\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t\t\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t\t\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t\t\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t\t\t\t\t// forcefully rerendered here.\r\n\t\t\t\t\t\t\tsetPhoneDigits(prefix)\r\n\t\t\t\t\t\t\tsetValueForPhoneDigits(undefined)\r\n\t\t\t\t\t\t\t// Force a re-render of the `<input/>` with previous `phoneDigits` value.\r\n\t\t\t\t\t\t\treturn rerender()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Entering phone number either in \"national\" format\r\n\t\t\t\t// when `country` has been specified, or in \"international\" format\r\n\t\t\t\t// when `country` has been specified but `withCountryCallingCode` hasn't.\r\n\t\t\t\t// Therefore, `+` is not allowed.\r\n\t\t\t\tif (phoneDigits && phoneDigits[0] === '+') {\r\n\t\t\t\t\t// Remove the `+`.\r\n\t\t\t\t\tphoneDigits = phoneDigits.slice(1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!defaultCountry) {\r\n\t\t\t// Force a `+` in the beginning of a `value`\r\n\t\t\t// when no `country` and `defaultCountry` have been specified.\r\n\t\t\tif (phoneDigits && phoneDigits[0] !== '+') {\r\n\t\t\t\t// Prepend a `+`.\r\n\t\t\t\tphoneDigits = '+' + phoneDigits\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Convert `phoneDigits` to `value`.\r\n\t\tif (phoneDigits) {\r\n\t\t\tvalue = getValueForPhoneDigits(phoneDigits)\r\n\t\t}\r\n\t\tsetPhoneDigits(phoneDigits)\r\n\t\tsetValueForPhoneDigits(value)\r\n\t}, [\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tdefaultCountry,\r\n\t\tmetadata,\r\n\t\tsetPhoneDigits,\r\n\t\tsetValueForPhoneDigits,\r\n\t\trerender,\r\n\t\tcountryMismatchDetected\r\n\t])\r\n\r\n\treturn [\r\n\t\tphoneDigits,\r\n\t\tonSetPhoneDigits\r\n\t]\r\n}\r\n\r\n/**\r\n * Returns phone number input field value for a E.164 phone number `value`.\r\n * @param  {string} [value]\r\n * @param  {string} [country]\r\n * @param  {boolean} [international]\r\n * @param  {boolean} [withCountryCallingCode]\r\n * @param  {string} [defaultCountry]\r\n * @param  {boolean} [useNationalFormatForDefaultCountryValue]\r\n * @param  {object} metadata\r\n * @return {string}\r\n */\r\nfunction getPhoneDigitsForValue(\r\n\tvalue,\r\n\tcountry,\r\n\tinternational,\r\n\twithCountryCallingCode,\r\n\tdefaultCountry,\r\n\tuseNationalFormatForDefaultCountryValue,\r\n\tmetadata,\r\n\tonCountryMismatch\r\n) {\r\n\tif (country && international && withCountryCallingCode) {\r\n\t\tconst prefix = getInternationalPhoneNumberPrefix(country, metadata)\r\n\t\tif (value) {\r\n\t\t\tif (value.indexOf(prefix) !== 0) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t\treturn prefix\r\n\t}\r\n\tif (!value) {\r\n\t\treturn ''\r\n\t}\r\n\tif (!country && !defaultCountry) {\r\n\t\treturn value\r\n\t}\r\n\tconst asYouType = new AsYouType(undefined, metadata)\r\n\tasYouType.input(value)\r\n\tconst phoneNumber = asYouType.getNumber()\r\n\tif (phoneNumber) {\r\n\t\tif (country) {\r\n\t\t\tif (phoneNumber.country && phoneNumber.country !== country) {\r\n\t\t\t\tonCountryMismatch(value, country, phoneNumber.country)\r\n\t\t\t} else if (phoneNumber.countryCallingCode !== getCountryCallingCode(country, metadata)) {\r\n\t\t\t\tonCountryMismatch(value, country)\r\n\t\t\t}\r\n\t\t\tif (international) {\r\n\t\t\t\treturn phoneNumber.nationalNumber\r\n\t\t\t}\r\n\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t} else {\r\n\t\t\t// `phoneNumber.countryCallingCode` is compared here  instead of\r\n\t\t\t// `phoneNumber.country`, because, for example, a person could have\r\n\t\t\t// previously input a phone number (in \"national\" format) that isn't\r\n\t\t\t// 100% valid for the `defaultCountry`, and if `phoneNumber.country`\r\n\t\t\t// was compared, then it wouldn't match, and such phone number\r\n\t\t\t// wouldn't be formatted as a \"national\" one, and instead would be\r\n\t\t\t// formatted as an \"international\" one, confusing the user.\r\n\t\t\t// Comparing `phoneNumber.countryCallingCode` works around such issues.\r\n\t\t\t//\r\n\t\t\t// Example: `defaultCountry=\"US\"` and the `<input/>` is empty.\r\n\t\t\t// The user inputs: \"222 333 4444\", which gets formatted to \"(222) 333-4444\".\r\n\t\t\t// The user then clicks \"Save\", the page is refreshed, and the user sees\r\n\t\t\t// that the `<input/>` value is now \"+1 222 333 4444\" which confuses the user:\r\n\t\t\t// the user expected the `<input/>` value to be \"(222) 333-4444\", same as it\r\n\t\t\t// was when they've just typed it in. The cause of the issue is that \"222 333 4444\"\r\n\t\t\t// is not a valid national number for US, and `phoneNumber.country` is compared\r\n\t\t\t// instead of `phoneNumber.countryCallingCode`. After the `phoneNumber.country`\r\n\t\t\t// comparison is replaced with `phoneNumber.countryCallingCode` one, the issue\r\n\t\t\t// is no longer the case.\r\n\t\t\t//\r\n\t\t\tif (phoneNumber.countryCallingCode && phoneNumber.countryCallingCode === getCountryCallingCode(defaultCountry, metadata) && useNationalFormatForDefaultCountryValue) {\r\n\t\t\t\treturn parseDigits(phoneNumber.formatNational())\r\n\t\t\t}\r\n\t\t\treturn value\r\n\t\t}\r\n\t} else {\r\n\t\treturn ''\r\n\t}\r\n}"],"mappings":"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","ignoreList":[]}