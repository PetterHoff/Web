{"version":3,"file":"InputBasic.js","names":["React","useCallback","PropTypes","parseIncompletePhoneNumber","formatIncompletePhoneNumber","getInputValuePrefix","removeInputValuePrefix","useInputKeyDownHandler","createInput","defaultMetadata","InputBasic","_ref","ref","value","onChange","onKeyDown","country","international","withCountryCallingCode","_ref$metadata","metadata","_ref$inputComponent","inputComponent","Input","rest","_objectWithoutProperties","_excluded","prefix","_onChange","event","newValue","target","newValueFormatted","format","indexOf","slice","_onKeyDown","createElement","_extends","forwardRef","propTypes","string","isRequired","func","bool","object","elementType"],"sources":["../source/InputBasic.js"],"sourcesContent":["import React, { useCallback } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { parseIncompletePhoneNumber, formatIncompletePhoneNumber } from 'libphonenumber-js/core'\r\n\r\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix.js'\r\n\r\nimport useInputKeyDownHandler from './useInputKeyDownHandler.js'\r\n\r\nexport function createInput(defaultMetadata) {\r\n\t/**\r\n\t * `InputBasic` is the most basic implementation of a `Component`\r\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\r\n\t * the user's input but doesn't control the caret in the process:\r\n\t * when erasing or inserting digits in the middle of a phone number\r\n\t * the caret usually jumps to the end (this is the expected behavior).\r\n\t * Why does `InputBasic` exist when there's `InputSmart`?\r\n\t * One reason is working around the [Samsung Galaxy smart caret positioning bug]\r\n\t * (https://github.com/catamphetamine/react-phone-number-input/issues/75).\r\n\t * Another reason is that, unlike `InputSmart`, it doesn't require DOM environment.\r\n\t */\r\n\tfunction InputBasic({\r\n\t\tvalue,\r\n\t\tonChange,\r\n\t\tonKeyDown,\r\n\t\tcountry,\r\n\t\tinternational,\r\n\t\twithCountryCallingCode,\r\n\t\tmetadata = defaultMetadata,\r\n\t\tinputComponent: Input = 'input',\r\n\t\t...rest\r\n\t}, ref) {\r\n\t\tconst prefix = getInputValuePrefix({\r\n\t\t\tcountry,\r\n\t\t\tinternational,\r\n\t\t\twithCountryCallingCode,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst _onChange = useCallback((event) => {\r\n\t\t\tlet newValue = parseIncompletePhoneNumber(event.target.value)\r\n\t\t\t// By default, if a value is something like `\"(123)\"`\r\n\t\t\t// then Backspace would only erase the rightmost brace\r\n\t\t\t// becoming something like `\"(123\"`\r\n\t\t\t// which would give the same `\"123\"` value\r\n\t\t\t// which would then be formatted back to `\"(123)\"`\r\n\t\t\t// and so a user wouldn't be able to erase the phone number.\r\n\t\t\t//\r\n\t\t\t// This issue is worked around with this simple hack:\r\n\t\t\t// when \"old\" and \"new\" parsed values are the same,\r\n\t\t\t// it checks if the \"new\" formatted value could be obtained\r\n\t\t\t// from the \"old\" formatted value by erasing some (or no) characters at the right side.\r\n\t\t\t// If it could then it's likely that the user has hit a Backspace key\r\n\t\t\t// and what they really intended was to erase a rightmost digit rather than\r\n\t\t\t// a rightmost punctuation character.\r\n\t\t\t//\r\n\t\t\tif (newValue === value) {\r\n\t\t\t\tconst newValueFormatted = format(prefix, newValue, country, metadata)\r\n\t\t\t\tif (newValueFormatted.indexOf(event.target.value) === 0) {\r\n\t\t\t\t\t// Trim the last digit (or plus sign).\r\n\t\t\t\t\tnewValue = newValue.slice(0, -1)\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tonChange(newValue)\r\n\t\t}, [\r\n\t\t\tprefix,\r\n\t\t\tvalue,\r\n\t\t\tonChange,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t])\r\n\r\n\t\tconst _onKeyDown = useInputKeyDownHandler({\r\n\t\t\tonKeyDown,\r\n\t\t\tinternational\r\n\t\t})\r\n\r\n\t\treturn (\r\n\t\t\t<Input\r\n\t\t\t\t{...rest}\r\n\t\t\t\tref={ref}\r\n\t\t\t\tvalue={format(prefix, value, country, metadata)}\r\n\t\t\t\tonChange={_onChange}\r\n\t\t\t\tonKeyDown={_onKeyDown}/>\r\n\t\t)\r\n\t}\r\n\r\n\tInputBasic = React.forwardRef(InputBasic)\r\n\r\n\tInputBasic.propTypes = {\r\n\t\t/**\r\n\t\t * The parsed phone number.\r\n\t\t * \"Parsed\" not in a sense of \"E.164\"\r\n\t\t * but rather in a sense of \"having only\r\n\t\t * digits and possibly a leading plus character\".\r\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t\t */\r\n\t\tvalue: PropTypes.string.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `value: string`.\r\n\t\t * Updates the `value` property.\r\n\t\t */\r\n\t\tonChange: PropTypes.func.isRequired,\r\n\r\n\t\t/**\r\n\t\t * A function of `event: Event`.\r\n\t\t * Handles `keydown` events.\r\n\t\t */\r\n\t\tonKeyDown: PropTypes.func,\r\n\r\n\t\t/**\r\n\t\t * A two-letter country code for formatting `value`\r\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\r\n\t\t * E.g. \"US\", \"RU\", etc.\r\n\t\t * If no `country` is passed then `value`\r\n\t\t * is formatted as an international phone number.\r\n\t\t * (e.g. `+7 800 555 35 35`)\r\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\r\n\t\t * because if `value` is an international number then `country` is ignored.\r\n\t\t */\r\n\t\tcountry : PropTypes.string,\r\n\r\n\t\t/**\r\n\t\t * If `country` property is passed along with `international={true}` property\r\n\t\t * then the phone number will be input in \"international\" format for that `country`\r\n\t\t * (without \"country calling code\").\r\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\r\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\r\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\r\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\r\n\t\t * (without \"country calling code\" `+1`).\r\n\t\t */\r\n\t\tinternational: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * If `country` and `international` properties are set,\r\n\t\t * then by default it won't include \"country calling code\" in the input field.\r\n\t\t * To change that, pass `withCountryCallingCode` property,\r\n\t\t * and it will include \"country calling code\" in the input field.\r\n\t\t */\r\n\t\twithCountryCallingCode: PropTypes.bool,\r\n\r\n\t\t/**\r\n\t\t * `libphonenumber-js` metadata.\r\n\t\t */\r\n\t\tmetadata: PropTypes.object,\r\n\r\n\t\t/**\r\n\t\t * The `<input/>` component.\r\n\t\t */\r\n\t\tinputComponent: PropTypes.elementType\r\n\t}\r\n\r\n\treturn InputBasic\r\n}\r\n\r\nexport default createInput()\r\n\r\nfunction format(prefix, value, country, metadata) {\r\n\treturn removeInputValuePrefix(\r\n\t\tformatIncompletePhoneNumber(\r\n\t\t\tprefix + value,\r\n\t\t\tcountry,\r\n\t\t\tmetadata\r\n\t\t),\r\n\t\tprefix\r\n\t)\r\n}"],"mappings":"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","ignoreList":[]}